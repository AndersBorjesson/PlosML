// Generated by GoGLL.
package ast

import (
	"ploshml/preprocessor/token"
)

// G0 : Expr ;
func G00(p0 interface{}) (interface{}, error) {
	// fmt.Println("ast.G00 is unimplemented")
	return nil, nil
}

// Expr : Start filename Stop ;
func Expr0(p0, p1, p2 interface{}) (interface{}, error) {
	// fmt.Println("ast.Expr0 is unimplemented")
	// fmt.Println(p0.([]string))
	// output := (p1.(*token.Token).LiteralString())
	// out/put = (p1.(*token.Token).LiteralString())
	t1 := p1.(*token.Token).Lext()
	t2 := p1.(*token.Token).Rext()
	S := string(p1.(*token.Token).GetInput()[t1:t2])
	// fmt.Println("ARNE", S)
	return S, nil
}

// Start : \include{ ;
func Start0(p0 interface{}) (interface{}, error) {
	// fmt.Println("ast.Start0 is unimplemented")
	return nil, nil
}

// Stop : } ;
func Stop0(p0 interface{}) (interface{}, error) {
	// fmt.Println("ast.Stop0 is unimplemented")
	return nil, nil
}
