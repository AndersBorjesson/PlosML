package swartifactdiagram

import (
	"github.com/blushft/go-diagrams/diagram"
	"github.com/blushft/go-diagrams/nodes/alibabacloud"
	"github.com/blushft/go-diagrams/nodes/apps"
	"github.com/blushft/go-diagrams/nodes/aws"
	"github.com/blushft/go-diagrams/nodes/azure"
	"github.com/blushft/go-diagrams/nodes/elastic"
	"github.com/blushft/go-diagrams/nodes/firebase"
	"github.com/blushft/go-diagrams/nodes/gcp"
	"github.com/blushft/go-diagrams/nodes/generic"
	"github.com/blushft/go-diagrams/nodes/k8s"
	"github.com/blushft/go-diagrams/nodes/oci"
	"github.com/blushft/go-diagrams/nodes/openstack"
	"github.com/blushft/go-diagrams/nodes/outscale"
	"github.com/blushft/go-diagrams/nodes/programming"
	"github.com/blushft/go-diagrams/nodes/saas"
)

func artifacts() map[string]func() *diagram.Node {
	afs := make(map[string]func() *diagram.Node)
	afs["analyticdb"] = func() *diagram.Node { return alibabacloud.Analytics.AnalyticDb() }
	afs["clickhouse"] = func() *diagram.Node { return apps.Database.Clickhouse() }
	afs["datalakeanalytics"] = func() *diagram.Node { return azure.Analytics.DataLakeAnalytics() }
	afs["elaticmapreduce"] = func() *diagram.Node { return alibabacloud.Analytics.ElaticMapReduce() }
	afs["opensearch"] = func() *diagram.Node { return alibabacloud.Application.OpenSearch() }
	afs["yida"] = func() *diagram.Node { return alibabacloud.Application.Yida() }
	afs["apigateway"] = func() *diagram.Node { return oci.Devops.ApiGateway() }
	afs["performancetestingservice"] = func() *diagram.Node { return alibabacloud.Application.PerformanceTestingService() }
	afs["codepipeline"] = func() *diagram.Node { return aws.Devtools.Codepipeline() }
	afs["directmail"] = func() *diagram.Node { return alibabacloud.Communication.DirectMail() }
	afs["messagenotificationservice"] = func() *diagram.Node { return alibabacloud.Application.MessageNotificationService() }
	afs["rdcloud"] = func() *diagram.Node { return alibabacloud.Application.RdCloud() }
	afs["blockchainasaservice"] = func() *diagram.Node { return alibabacloud.Application.BlockchainAsAService() }
	afs["cloudcallcenter"] = func() *diagram.Node { return alibabacloud.Application.CloudCallCenter() }
	afs["nodejsperformanceplatform"] = func() *diagram.Node { return alibabacloud.Application.NodeJsPerformancePlatform() }
	afs["smartconversationanalysis"] = func() *diagram.Node { return alibabacloud.Application.SmartConversationAnalysis() }
	afs["beebot"] = func() *diagram.Node { return alibabacloud.Application.BeeBot() }
	afs["logservice"] = func() *diagram.Node { return alibabacloud.Application.LogService() }
	afs["mobilepush"] = func() *diagram.Node { return alibabacloud.Communication.MobilePush() }
	afs["autoscaling"] = func() *diagram.Node { return aws.Management.AutoScaling() }
	afs["containerregistry"] = func() *diagram.Node { return gcp.Devtools.ContainerRegistry() }
	afs["elasticcomputeservice"] = func() *diagram.Node { return alibabacloud.Compute.ElasticComputeService() }
	afs["functioncompute"] = func() *diagram.Node { return alibabacloud.Compute.FunctionCompute() }
	afs["operationorchestrationservice"] = func() *diagram.Node { return alibabacloud.Compute.OperationOrchestrationService() }
	afs["serverloadbalancer"] = func() *diagram.Node { return alibabacloud.Network.ServerLoadBalancer() }
	afs["serverlessappengine"] = func() *diagram.Node { return alibabacloud.Compute.ServerlessAppEngine() }
	afs["containerservice"] = func() *diagram.Node { return alibabacloud.Compute.ContainerService() }
	afs["elastichighperformancecomputing"] = func() *diagram.Node { return alibabacloud.Compute.ElasticHighPerformanceComputing() }
	afs["elasticsearch"] = func() *diagram.Node { return elastic.Elasticsearch.Elasticsearch() }
	afs["resourceorchestrationservice"] = func() *diagram.Node { return alibabacloud.Compute.ResourceOrchestrationService() }
	afs["batchcompute"] = func() *diagram.Node { return alibabacloud.Compute.BatchCompute() }
	afs["elasticcontainerinstance"] = func() *diagram.Node { return alibabacloud.Compute.ElasticContainerInstance() }
	afs["simpleapplicationserver"] = func() *diagram.Node { return alibabacloud.Compute.SimpleApplicationServer() }
	afs["webappservice"] = func() *diagram.Node { return alibabacloud.Compute.WebAppService() }
	afs["databasebackupservice"] = func() *diagram.Node { return alibabacloud.Database.DatabaseBackupService() }
	afs["relationaldatabaseservice"] = func() *diagram.Node { return alibabacloud.Database.RelationalDatabaseService() }
	afs["apsaradbmongodb"] = func() *diagram.Node { return alibabacloud.Database.ApsaradbMongodb() }
	afs["apsaradbredis"] = func() *diagram.Node { return alibabacloud.Database.ApsaradbRedis() }
	afs["datamanagementservice"] = func() *diagram.Node { return alibabacloud.Database.DataManagementService() }
	afs["datatransmissionservice"] = func() *diagram.Node { return alibabacloud.Database.DataTransmissionService() }
	afs["graphdatabaseservice"] = func() *diagram.Node { return alibabacloud.Database.GraphDatabaseService() }
	afs["apsaradbcassandra"] = func() *diagram.Node { return alibabacloud.Database.ApsaradbCassandra() }
	afs["apsaradbhbase"] = func() *diagram.Node { return alibabacloud.Database.ApsaradbHbase() }
	afs["apsaradbppas"] = func() *diagram.Node { return alibabacloud.Database.ApsaradbPpas() }
	afs["apsaradboceanbase"] = func() *diagram.Node { return alibabacloud.Database.ApsaradbOceanbase() }
	afs["apsaradbpolardb"] = func() *diagram.Node { return alibabacloud.Database.ApsaradbPolardb() }
	afs["hybriddbformysql"] = func() *diagram.Node { return alibabacloud.Database.HybriddbForMysql() }
	afs["disributerelationaldatabaseservice"] = func() *diagram.Node { return alibabacloud.Database.DisributeRelationalDatabaseService() }
	afs["apsaradbmemcache"] = func() *diagram.Node { return alibabacloud.Database.ApsaradbMemcache() }
	afs["apsaradbpostgresql"] = func() *diagram.Node { return alibabacloud.Database.ApsaradbPostgresql() }
	afs["apsaradbsqlserver"] = func() *diagram.Node { return alibabacloud.Database.ApsaradbSqlserver() }
	afs["iotinternetdeviceid"] = func() *diagram.Node { return alibabacloud.Iot.IotInternetDeviceId() }
	afs["iotlinkwan"] = func() *diagram.Node { return alibabacloud.Iot.IotLinkWan() }
	afs["iotmobileconnectionpackage"] = func() *diagram.Node { return alibabacloud.Iot.IotMobileConnectionPackage() }
	afs["iotplatform"] = func() *diagram.Node { return alibabacloud.Iot.IotPlatform() }
	afs["elasticipaddress"] = func() *diagram.Node { return alibabacloud.Network.ElasticIpAddress() }
	afs["virtualprivatecloud"] = func() *diagram.Node { return gcp.Network.VirtualPrivateCloud() }
	afs["vpngateway"] = func() *diagram.Node { return alibabacloud.Network.VpnGateway() }
	afs["smartaccessgateway"] = func() *diagram.Node { return alibabacloud.Network.SmartAccessGateway() }
	afs["cdn"] = func() *diagram.Node { return oci.Connectivity.Cdn() }
	afs["cloudenterprisenetwork"] = func() *diagram.Node { return alibabacloud.Network.CloudEnterpriseNetwork() }
	afs["expressconnect"] = func() *diagram.Node { return alibabacloud.Network.ExpressConnect() }
	afs["natgateway"] = func() *diagram.Node { return oci.Connectivity.NatGateway() }
	afs["antibotservice"] = func() *diagram.Node { return alibabacloud.Security.AntiBotService() }
	afs["antiddospro"] = func() *diagram.Node { return alibabacloud.Security.AntiDdosPro() }
	afs["bastionhost"] = func() *diagram.Node { return alibabacloud.Security.BastionHost() }
	afs["cloudfirewall"] = func() *diagram.Node { return alibabacloud.Security.CloudFirewall() }
	afs["crowdsourcedsecuritytesting"] = func() *diagram.Node { return alibabacloud.Security.CrowdsourcedSecurityTesting() }
	afs["gameshield"] = func() *diagram.Node { return alibabacloud.Security.GameShield() }
	afs["securitycenter"] = func() *diagram.Node { return azure.Security.SecurityCenter() }
	afs["antifraudservice"] = func() *diagram.Node { return alibabacloud.Security.AntifraudService() }
	afs["cloudsecurityscanner"] = func() *diagram.Node { return alibabacloud.Security.CloudSecurityScanner() }
	afs["contentmoderation"] = func() *diagram.Node { return alibabacloud.Security.ContentModeration() }
	afs["dbaudit"] = func() *diagram.Node { return alibabacloud.Security.DbAudit() }
	afs["antiddosbasic"] = func() *diagram.Node { return alibabacloud.Security.AntiDdosBasic() }
	afs["dataencryptionservice"] = func() *diagram.Node { return alibabacloud.Security.DataEncryptionService() }
	afs["idverification"] = func() *diagram.Node { return alibabacloud.Security.IdVerification() }
	afs["managedsecurityservice"] = func() *diagram.Node { return alibabacloud.Security.ManagedSecurityService() }
	afs["serverguard"] = func() *diagram.Node { return alibabacloud.Security.ServerGuard() }
	afs["sslcertificates"] = func() *diagram.Node { return alibabacloud.Security.SslCertificates() }
	afs["webapplicationfirewall"] = func() *diagram.Node { return alibabacloud.Security.WebApplicationFirewall() }
	afs["filestoragenas"] = func() *diagram.Node { return alibabacloud.Storage.FileStorageNas() }
	afs["hybridbackuprecovery"] = func() *diagram.Node { return alibabacloud.Storage.HybridBackupRecovery() }
	afs["hybridclouddisasterrecovery"] = func() *diagram.Node { return alibabacloud.Storage.HybridCloudDisasterRecovery() }
	afs["imm"] = func() *diagram.Node { return alibabacloud.Storage.Imm() }
	afs["objectstorageservice"] = func() *diagram.Node { return alibabacloud.Storage.ObjectStorageService() }
	afs["objecttablestore"] = func() *diagram.Node { return alibabacloud.Storage.ObjectTableStore() }
	afs["cloudstoragegateway"] = func() *diagram.Node { return alibabacloud.Storage.CloudStorageGateway() }
	afs["filestoragehdfs"] = func() *diagram.Node { return alibabacloud.Storage.FileStorageHdfs() }
	afs["dns"] = func() *diagram.Node { return oci.Connectivity.Dns() }
	afs["domain"] = func() *diagram.Node { return alibabacloud.Web.Domain() }
	afs["dbt"] = func() *diagram.Node { return apps.Analytics.Dbt() }
	afs["hadoop"] = func() *diagram.Node { return apps.Analytics.Hadoop() }
	afs["hive"] = func() *diagram.Node { return apps.Analytics.Hive() }
	afs["metabase"] = func() *diagram.Node { return apps.Analytics.Metabase() }
	afs["tableau"] = func() *diagram.Node { return apps.Analytics.Tableau() }
	afs["spark"] = func() *diagram.Node { return apps.Analytics.Spark() }
	afs["storm"] = func() *diagram.Node { return apps.Analytics.Storm() }
	afs["beam"] = func() *diagram.Node { return apps.Analytics.Beam() }
	afs["databricks"] = func() *diagram.Node { return azure.Analytics.Databricks() }
	afs["flink"] = func() *diagram.Node { return apps.Analytics.Flink() }
	afs["norikra"] = func() *diagram.Node { return apps.Analytics.Norikra() }
	afs["singer"] = func() *diagram.Node { return apps.Analytics.Singer() }
	afs["spinnaker"] = func() *diagram.Node { return apps.Cd.Spinnaker() }
	afs["tektoncli"] = func() *diagram.Node { return apps.Cd.TektonCli() }
	afs["tekton"] = func() *diagram.Node { return apps.Cd.Tekton() }
	afs["teamcity"] = func() *diagram.Node { return apps.Ci.Teamcity() }
	afs["travisci"] = func() *diagram.Node { return apps.Ci.Travisci() }
	afs["zuulci"] = func() *diagram.Node { return apps.Ci.Zuulci() }
	afs["circleci"] = func() *diagram.Node { return apps.Ci.Circleci() }
	afs["concourseci"] = func() *diagram.Node { return apps.Ci.Concourseci() }
	afs["droneci"] = func() *diagram.Node { return apps.Ci.Droneci() }
	afs["gitlabci"] = func() *diagram.Node { return apps.Ci.Gitlabci() }
	afs["jenkins"] = func() *diagram.Node { return apps.Ci.Jenkins() }
	afs["screwdrivercd"] = func() *diagram.Node { return apps.Ci.Screwdrivercd() }
	afs["client"] = func() *diagram.Node { return apps.Client.Client() }
	afs["user"] = func() *diagram.Node { return k8s.Rbac.User() }
	afs["users"] = func() *diagram.Node { return aws.General.Users() }
	afs["nomad"] = func() *diagram.Node { return apps.Compute.Nomad() }
	afs["server"] = func() *diagram.Node { return apps.Compute.Server() }
	afs["docker"] = func() *diagram.Node { return apps.Container.Docker() }
	afs["rkt"] = func() *diagram.Node { return apps.Container.Rkt() }
	afs["mariadb"] = func() *diagram.Node { return apps.Database.Mariadb() }
	afs["mssql"] = func() *diagram.Node { return apps.Database.Mssql() }
	afs["oracle"] = func() *diagram.Node { return apps.Database.Oracle() }
	afs["couchbase"] = func() *diagram.Node { return apps.Database.Couchbase() }
	afs["druid"] = func() *diagram.Node { return apps.Database.Druid() }
	afs["janusgraph"] = func() *diagram.Node { return apps.Database.Janusgraph() }
	afs["mongodb"] = func() *diagram.Node { return apps.Database.Mongodb() }
	afs["neo4j"] = func() *diagram.Node { return apps.Database.Neo4J() }
	afs["postgresql"] = func() *diagram.Node { return apps.Database.Postgresql() }
	afs["cassandra"] = func() *diagram.Node { return apps.Database.Cassandra() }
	afs["cockroachdb"] = func() *diagram.Node { return apps.Database.Cockroachdb() }
	afs["hbase"] = func() *diagram.Node { return apps.Database.Hbase() }
	afs["influxdb"] = func() *diagram.Node { return apps.Database.Influxdb() }
	afs["mysql"] = func() *diagram.Node { return apps.Database.Mysql() }
	afs["scylla"] = func() *diagram.Node { return apps.Database.Scylla() }
	afs["couchdb"] = func() *diagram.Node { return apps.Database.Couchdb() }
	afs["dgraph"] = func() *diagram.Node { return apps.Database.Dgraph() }
	afs["embulk"] = func() *diagram.Node { return apps.Etl.Embulk() }
	afs["argocd"] = func() *diagram.Node { return apps.Gitops.Argocd() }
	afs["flagger"] = func() *diagram.Node { return apps.Gitops.Flagger() }
	afs["flux"] = func() *diagram.Node { return apps.Gitops.Flux() }
	afs["ansible"] = func() *diagram.Node { return openstack.Deployment.Ansible() }
	afs["atlantis"] = func() *diagram.Node { return apps.Iac.Atlantis() }
	afs["awx"] = func() *diagram.Node { return apps.Iac.Awx() }
	afs["terraform"] = func() *diagram.Node { return apps.Iac.Terraform() }
	afs["hazelcast"] = func() *diagram.Node { return apps.Inmemory.Hazelcast() }
	afs["memcached"] = func() *diagram.Node { return apps.Inmemory.Memcached() }
	afs["redis"] = func() *diagram.Node { return apps.Inmemory.Redis() }
	afs["aerospike"] = func() *diagram.Node { return apps.Inmemory.Aerospike() }
	afs["graylog"] = func() *diagram.Node { return apps.Logging.Graylog() }
	afs["loki"] = func() *diagram.Node { return apps.Logging.Loki() }
	afs["rsyslog"] = func() *diagram.Node { return apps.Logging.Rsyslog() }
	afs["syslogng"] = func() *diagram.Node { return apps.Logging.SyslogNg() }
	afs["fluentbit"] = func() *diagram.Node { return apps.Logging.Fluentbit() }
	afs["fluentd"] = func() *diagram.Node { return apps.Logging.Fluentd() }
	afs["polyaxon"] = func() *diagram.Node { return apps.Mlops.Polyaxon() }
	afs["thanos"] = func() *diagram.Node { return apps.Monitoring.Thanos() }
	afs["datadog"] = func() *diagram.Node { return saas.Logging.Datadog() }
	afs["grafana"] = func() *diagram.Node { return apps.Monitoring.Grafana() }
	afs["prometheusoperator"] = func() *diagram.Node { return apps.Monitoring.PrometheusOperator() }
	afs["prometheus"] = func() *diagram.Node { return apps.Monitoring.Prometheus() }
	afs["sentry"] = func() *diagram.Node { return apps.Monitoring.Sentry() }
	afs["splunk"] = func() *diagram.Node { return apps.Monitoring.Splunk() }
	afs["internet"] = func() *diagram.Node { return apps.Network.Internet() }
	afs["istio"] = func() *diagram.Node { return apps.Network.Istio() }
	afs["linkerd"] = func() *diagram.Node { return apps.Network.Linkerd() }
	afs["ocelot"] = func() *diagram.Node { return apps.Network.Ocelot() }
	afs["tomcat"] = func() *diagram.Node { return apps.Network.Tomcat() }
	afs["vyos"] = func() *diagram.Node { return apps.Network.Vyos() }
	afs["envoy"] = func() *diagram.Node { return apps.Network.Envoy() }
	afs["nginx"] = func() *diagram.Node { return apps.Network.Nginx() }
	afs["pfsense"] = func() *diagram.Node { return apps.Network.Pfsense() }
	afs["apache"] = func() *diagram.Node { return apps.Network.Apache() }
	afs["etcd"] = func() *diagram.Node { return k8s.Infra.Etcd() }
	afs["haproxy"] = func() *diagram.Node { return apps.Network.Haproxy() }
	afs["pomerium"] = func() *diagram.Node { return apps.Network.Pomerium() }
	afs["caddy"] = func() *diagram.Node { return apps.Network.Caddy() }
	afs["kong"] = func() *diagram.Node { return apps.Network.Kong() }
	afs["traefik"] = func() *diagram.Node { return apps.Network.Traefik() }
	afs["zookeeper"] = func() *diagram.Node { return apps.Network.Zookeeper() }
	afs["consul"] = func() *diagram.Node { return apps.Network.Consul() }
	afs["activemq"] = func() *diagram.Node { return apps.Queue.Activemq() }
	afs["celery"] = func() *diagram.Node { return apps.Queue.Celery() }
	afs["kafka"] = func() *diagram.Node { return apps.Queue.Kafka() }
	afs["rabbitmq"] = func() *diagram.Node { return apps.Queue.Rabbitmq() }
	afs["zeromq"] = func() *diagram.Node { return apps.Queue.Zeromq() }
	afs["solr"] = func() *diagram.Node { return apps.Search.Solr() }
	afs["trivy"] = func() *diagram.Node { return apps.Security.Trivy() }
	afs["vault"] = func() *diagram.Node { return oci.Security.Vault() }
	afs["git"] = func() *diagram.Node { return apps.Vcs.Git() }
	afs["github"] = func() *diagram.Node { return apps.Vcs.Github() }
	afs["gitlab"] = func() *diagram.Node { return apps.Vcs.Gitlab() }
	afs["digdag"] = func() *diagram.Node { return apps.Workflow.Digdag() }
	afs["kubeflow"] = func() *diagram.Node { return apps.Workflow.Kubeflow() }
	afs["nifi"] = func() *diagram.Node { return apps.Workflow.Nifi() }
	afs["airflow"] = func() *diagram.Node { return apps.Workflow.Airflow() }
	afs["analytics"] = func() *diagram.Node { return aws.Analytics.Analytics() }
	afs["emr"] = func() *diagram.Node { return aws.Analytics.Emr() }
	afs["gluecrawlers"] = func() *diagram.Node { return aws.Analytics.GlueCrawlers() }
	afs["kinesisdataanalytics"] = func() *diagram.Node { return aws.Analytics.KinesisDataAnalytics() }
	afs["kinesisvideostreams"] = func() *diagram.Node { return aws.Analytics.KinesisVideoStreams() }
	afs["kinesis"] = func() *diagram.Node { return aws.Analytics.Kinesis() }
	afs["quicksight"] = func() *diagram.Node { return aws.Analytics.Quicksight() }
	afs["elasticsearchservice"] = func() *diagram.Node { return aws.Analytics.ElasticsearchService() }
	afs["gluedatacatalog"] = func() *diagram.Node { return aws.Analytics.GlueDataCatalog() }
	afs["redshiftdensestoragenode"] = func() *diagram.Node { return aws.Analytics.RedshiftDenseStorageNode() }
	afs["redshift"] = func() *diagram.Node { return aws.Database.Redshift() }
	afs["athena"] = func() *diagram.Node { return aws.Analytics.Athena() }
	afs["cloudsearchsearchdocuments"] = func() *diagram.Node { return aws.Analytics.CloudsearchSearchDocuments() }
	afs["emrhdfscluster"] = func() *diagram.Node { return aws.Analytics.EmrHdfsCluster() }
	afs["lakeformation"] = func() *diagram.Node { return aws.Analytics.LakeFormation() }
	afs["managedstreamingforkafka"] = func() *diagram.Node { return aws.Analytics.ManagedStreamingForKafka() }
	afs["cloudsearch"] = func() *diagram.Node { return aws.Analytics.Cloudsearch() }
	afs["datapipeline"] = func() *diagram.Node { return aws.Analytics.DataPipeline() }
	afs["emrcluster"] = func() *diagram.Node { return aws.Analytics.EmrCluster() }
	afs["glue"] = func() *diagram.Node { return aws.Analytics.Glue() }
	afs["kinesisdatafirehose"] = func() *diagram.Node { return aws.Analytics.KinesisDataFirehose() }
	afs["kinesisdatastreams"] = func() *diagram.Node { return aws.Analytics.KinesisDataStreams() }
	afs["redshiftdensecomputenode"] = func() *diagram.Node { return aws.Analytics.RedshiftDenseComputeNode() }
	afs["sumerian"] = func() *diagram.Node { return aws.Ar.Sumerian() }
	afs["managedblockchain"] = func() *diagram.Node { return aws.Blockchain.ManagedBlockchain() }
	afs["quantumledgerdatabaseqldb"] = func() *diagram.Node { return aws.Database.QuantumLedgerDatabaseQldb() }
	afs["alexaforbusiness"] = func() *diagram.Node { return aws.Business.AlexaForBusiness() }
	afs["chime"] = func() *diagram.Node { return aws.Business.Chime() }
	afs["workmail"] = func() *diagram.Node { return aws.Business.Workmail() }
	afs["outpostsrounded"] = func() *diagram.Node { return aws.Compute.OutpostsRounded() }
	afs["thinkboxsequoia"] = func() *diagram.Node { return aws.Compute.ThinkboxSequoia() }
	afs["elasticbeanstalk"] = func() *diagram.Node { return aws.Compute.ElasticBeanstalk() }
	afs["fargaterounded"] = func() *diagram.Node { return aws.Compute.FargateRounded() }
	afs["lambdarounded"] = func() *diagram.Node { return aws.Compute.LambdaRounded() }
	afs["elasticbeanstalkrounded"] = func() *diagram.Node { return aws.Compute.ElasticBeanstalkRounded() }
	afs["thinkboxsequoiarounded"] = func() *diagram.Node { return aws.Compute.ThinkboxSequoiaRounded() }
	afs["thinkboxstokerounded"] = func() *diagram.Node { return aws.Compute.ThinkboxStokeRounded() }
	afs["thinkboxxmeshrounded"] = func() *diagram.Node { return aws.Compute.ThinkboxXmeshRounded() }
	afs["applicationautoscalingrounded"] = func() *diagram.Node { return aws.Compute.ApplicationAutoScalingRounded() }
	afs["ec2containerregistry"] = func() *diagram.Node { return aws.Compute.Ec2ContainerRegistry() }
	afs["fargate"] = func() *diagram.Node { return aws.Compute.Fargate() }
	afs["outposts"] = func() *diagram.Node { return aws.Compute.Outposts() }
	afs["thinkboxdraftrounded"] = func() *diagram.Node { return aws.Compute.ThinkboxDraftRounded() }
	afs["vmwarecloudonawsrounded"] = func() *diagram.Node { return aws.Compute.VmwareCloudOnAwsRounded() }
	afs["batchrounded"] = func() *diagram.Node { return aws.Compute.BatchRounded() }
	afs["elastickubernetesservicerounded"] = func() *diagram.Node { return aws.Compute.ElasticKubernetesServiceRounded() }
	afs["lambda"] = func() *diagram.Node { return aws.Compute.Lambda() }
	afs["serverlessapplicationrepositoryrounded"] = func() *diagram.Node { return aws.Compute.ServerlessApplicationRepositoryRounded() }
	afs["thinkboxdeadlinerounded"] = func() *diagram.Node { return aws.Compute.ThinkboxDeadlineRounded() }
	afs["thinkboxdeadline"] = func() *diagram.Node { return aws.Compute.ThinkboxDeadline() }
	afs["thinkboxstoke"] = func() *diagram.Node { return aws.Compute.ThinkboxStoke() }
	afs["elasticcontainerservicerounded"] = func() *diagram.Node { return aws.Compute.ElasticContainerServiceRounded() }
	afs["elasticcontainerservice"] = func() *diagram.Node { return aws.Compute.ElasticContainerService() }
	afs["lightsail"] = func() *diagram.Node { return aws.Compute.Lightsail() }
	afs["thinkboxdraft"] = func() *diagram.Node { return aws.Compute.ThinkboxDraft() }
	afs["thinkboxfrost"] = func() *diagram.Node { return aws.Compute.ThinkboxFrost() }
	afs["vmwarecloudonaws"] = func() *diagram.Node { return aws.Compute.VmwareCloudOnAws() }
	afs["computerounded"] = func() *diagram.Node { return aws.Compute.ComputeRounded() }
	afs["ec2rounded"] = func() *diagram.Node { return aws.Compute.Ec2Rounded() }
	afs["serverlessapplicationrepository"] = func() *diagram.Node { return aws.Compute.ServerlessApplicationRepository() }
	afs["elastickubernetesservice"] = func() *diagram.Node { return aws.Compute.ElasticKubernetesService() }
	afs["thinkboxkrakatoarounded"] = func() *diagram.Node { return aws.Compute.ThinkboxKrakatoaRounded() }
	afs["applicationautoscaling"] = func() *diagram.Node { return aws.Compute.ApplicationAutoScaling() }
	afs["batch"] = func() *diagram.Node { return aws.Compute.Batch() }
	afs["ec2"] = func() *diagram.Node { return aws.Compute.Ec2() }
	afs["thinkboxfrostrounded"] = func() *diagram.Node { return aws.Compute.ThinkboxFrostRounded() }
	afs["thinkboxkrakatoa"] = func() *diagram.Node { return aws.Compute.ThinkboxKrakatoa() }
	afs["thinkboxxmesh"] = func() *diagram.Node { return aws.Compute.ThinkboxXmesh() }
	afs["compute"] = func() *diagram.Node { return outscale.Compute.Compute() }
	afs["ec2containerregistryrounded"] = func() *diagram.Node { return aws.Compute.Ec2ContainerRegistryRounded() }
	afs["lightsailrounded"] = func() *diagram.Node { return aws.Compute.LightsailRounded() }
	afs["costandusagereport"] = func() *diagram.Node { return aws.Cost.CostAndUsageReport() }
	afs["costexplorer"] = func() *diagram.Node { return aws.Cost.CostExplorer() }
	afs["reservedinstancereporting"] = func() *diagram.Node { return aws.Cost.ReservedInstanceReporting() }
	afs["savingsplans"] = func() *diagram.Node { return aws.Cost.SavingsPlans() }
	afs["budgets"] = func() *diagram.Node { return aws.Cost.Budgets() }
	afs["dynamodb"] = func() *diagram.Node { return aws.Database.Dynamodb() }
	afs["neptune"] = func() *diagram.Node { return aws.Database.Neptune() }
	afs["aurora"] = func() *diagram.Node { return aws.Database.Aurora() }
	afs["databasemigrationservice"] = func() *diagram.Node { return aws.Migration.DatabaseMigrationService() }
	afs["database"] = func() *diagram.Node { return aws.Database.Database() }
	afs["documentdbmongodbcompatibility"] = func() *diagram.Node { return aws.Database.DocumentdbMongodbCompatibility() }
	afs["elasticache"] = func() *diagram.Node { return aws.Database.Elasticache() }
	afs["rdsonvmware"] = func() *diagram.Node { return aws.Database.RdsOnVmware() }
	afs["timestream"] = func() *diagram.Node { return aws.Database.Timestream() }
	afs["dynamodbdax"] = func() *diagram.Node { return aws.Database.DynamodbDax() }
	afs["dynamodbglobalsecondaryindex"] = func() *diagram.Node { return aws.Database.DynamodbGlobalSecondaryIndex() }
	afs["dynamodbtable"] = func() *diagram.Node { return aws.Database.DynamodbTable() }
	afs["rds"] = func() *diagram.Node { return aws.Database.Rds() }
	afs["toolsandsdks"] = func() *diagram.Node { return aws.Devtools.ToolsAndSdks() }
	afs["xray"] = func() *diagram.Node { return aws.Devtools.XRay() }
	afs["clouddevelopmentkit"] = func() *diagram.Node { return aws.Devtools.CloudDevelopmentKit() }
	afs["cloud9"] = func() *diagram.Node { return aws.Devtools.Cloud9() }
	afs["codebuild"] = func() *diagram.Node { return aws.Devtools.Codebuild() }
	afs["codecommit"] = func() *diagram.Node { return aws.Devtools.Codecommit() }
	afs["codedeploy"] = func() *diagram.Node { return aws.Devtools.Codedeploy() }
	afs["codestar"] = func() *diagram.Node { return aws.Devtools.Codestar() }
	afs["commandlineinterface"] = func() *diagram.Node { return aws.Management.CommandLineInterface() }
	afs["developertools"] = func() *diagram.Node { return azure.General.Developertools() }
	afs["professionalservices"] = func() *diagram.Node { return aws.Enablement.ProfessionalServices() }
	afs["support"] = func() *diagram.Node { return azure.General.Support() }
	afs["iq"] = func() *diagram.Node { return aws.Enablement.Iq() }
	afs["managedservices"] = func() *diagram.Node { return aws.Management.ManagedServices() }
	afs["appstream20"] = func() *diagram.Node { return aws.Enduser.Appstream20() }
	afs["workdocs"] = func() *diagram.Node { return aws.Enduser.Workdocs() }
	afs["worklink"] = func() *diagram.Node { return aws.Enduser.Worklink() }
	afs["workspaces"] = func() *diagram.Node { return aws.Enduser.Workspaces() }
	afs["connect"] = func() *diagram.Node { return aws.Engagement.Connect() }
	afs["pinpoint"] = func() *diagram.Node { return aws.Mobile.Pinpoint() }
	afs["simpleemailserviceses"] = func() *diagram.Node { return aws.Engagement.SimpleEmailServiceSes() }
	afs["gamelift"] = func() *diagram.Node { return aws.Game.Gamelift() }
	afs["disk"] = func() *diagram.Node { return aws.General.Disk() }
	afs["general"] = func() *diagram.Node { return aws.General.General() }
	afs["genericofficebuilding"] = func() *diagram.Node { return aws.General.GenericOfficeBuilding() }
	afs["genericdatabase"] = func() *diagram.Node { return aws.General.GenericDatabase() }
	afs["genericfirewall"] = func() *diagram.Node { return aws.General.GenericFirewall() }
	afs["genericsamltoken"] = func() *diagram.Node { return aws.General.GenericSamlToken() }
	afs["genericsdk"] = func() *diagram.Node { return aws.General.GenericSdk() }
	afs["marketplace"] = func() *diagram.Node { return azure.General.Marketplace() }
	afs["tradicionalserver"] = func() *diagram.Node { return aws.General.TradicionalServer() }
	afs["appsync"] = func() *diagram.Node { return aws.Mobile.Appsync() }
	afs["consolemobileapplication"] = func() *diagram.Node { return aws.Integration.ConsoleMobileApplication() }
	afs["eventbridge"] = func() *diagram.Node { return aws.Integration.Eventbridge() }
	afs["mq"] = func() *diagram.Node { return aws.Integration.Mq() }
	afs["simplenotificationservicesns"] = func() *diagram.Node { return aws.Integration.SimpleNotificationServiceSns() }
	afs["simplequeueservicesqs"] = func() *diagram.Node { return aws.Integration.SimpleQueueServiceSqs() }
	afs["stepfunctions"] = func() *diagram.Node { return aws.Integration.StepFunctions() }
	afs["applicationintegration"] = func() *diagram.Node { return aws.Integration.ApplicationIntegration() }
	afs["freertos"] = func() *diagram.Node { return aws.Iot.Freertos() }
	afs["iotlambda"] = func() *diagram.Node { return aws.Iot.IotLambda() }
	afs["iottopic"] = func() *diagram.Node { return aws.Iot.IotTopic() }
	afs["iotshadow"] = func() *diagram.Node { return aws.Iot.IotShadow() }
	afs["iotaction"] = func() *diagram.Node { return aws.Iot.IotAction() }
	afs["iotalexaskill"] = func() *diagram.Node { return aws.Iot.IotAlexaSkill() }
	afs["iotevents"] = func() *diagram.Node { return aws.Iot.IotEvents() }
	afs["iothardwareboard"] = func() *diagram.Node { return aws.Iot.IotHardwareBoard() }
	afs["iotjobs"] = func() *diagram.Node { return aws.Iot.IotJobs() }
	afs["iotpolicy"] = func() *diagram.Node { return aws.Iot.IotPolicy() }
	afs["iotpolicyemergency"] = func() *diagram.Node { return aws.Iot.IotPolicyEmergency() }
	afs["iotsitewise"] = func() *diagram.Node { return aws.Iot.IotSitewise() }
	afs["internetofthings"] = func() *diagram.Node { return aws.Iot.InternetOfThings() }
	afs["iotalexaecho"] = func() *diagram.Node { return aws.Iot.IotAlexaEcho() }
	afs["iotcore"] = func() *diagram.Node { return gcp.Iot.IotCore() }
	afs["iotdevicemanagement"] = func() *diagram.Node { return aws.Iot.IotDeviceManagement() }
	afs["iotgreengrassconnector"] = func() *diagram.Node { return aws.Iot.IotGreengrassConnector() }
	afs["iothttp"] = func() *diagram.Node { return aws.Iot.IotHttp() }
	afs["iotanalytics"] = func() *diagram.Node { return aws.Iot.IotAnalytics() }
	afs["iotcamera"] = func() *diagram.Node { return aws.Iot.IotCamera() }
	afs["iothttp2"] = func() *diagram.Node { return aws.Iot.IotHttp2() }
	afs["iotthingsgraph"] = func() *diagram.Node { return aws.Iot.IotThingsGraph() }
	afs["iotdevicedefender"] = func() *diagram.Node { return aws.Iot.IotDeviceDefender() }
	afs["iot1click"] = func() *diagram.Node { return aws.Iot.Iot1Click() }
	afs["iotbutton"] = func() *diagram.Node { return aws.Iot.IotButton() }
	afs["iotcertificate"] = func() *diagram.Node { return aws.Iot.IotCertificate() }
	afs["iotgreengrass"] = func() *diagram.Node { return aws.Iot.IotGreengrass() }
	afs["iotmqtt"] = func() *diagram.Node { return aws.Iot.IotMqtt() }
	afs["iotrule"] = func() *diagram.Node { return aws.Iot.IotRule() }
	afs["config"] = func() *diagram.Node { return aws.Management.Config() }
	afs["managementconsole"] = func() *diagram.Node { return aws.Management.ManagementConsole() }
	afs["systemsmanager"] = func() *diagram.Node { return aws.Management.SystemsManager() }
	afs["wellarchitectedtool"] = func() *diagram.Node { return aws.Management.WellArchitectedTool() }
	afs["cloudformation"] = func() *diagram.Node { return aws.Management.Cloudformation() }
	afs["licensemanager"] = func() *diagram.Node { return aws.Management.LicenseManager() }
	afs["servicecatalog"] = func() *diagram.Node { return aws.Management.ServiceCatalog() }
	afs["trustedadvisor"] = func() *diagram.Node { return aws.Management.TrustedAdvisor() }
	afs["cloudtrail"] = func() *diagram.Node { return aws.Management.Cloudtrail() }
	afs["controltower"] = func() *diagram.Node { return aws.Management.ControlTower() }
	afs["organizations"] = func() *diagram.Node { return aws.Management.Organizations() }
	afs["systemsmanagerparameterstore"] = func() *diagram.Node { return aws.Management.SystemsManagerParameterStore() }
	afs["cloudwatch"] = func() *diagram.Node { return aws.Management.Cloudwatch() }
	afs["codeguru"] = func() *diagram.Node { return aws.Management.Codeguru() }
	afs["opsworks"] = func() *diagram.Node { return aws.Management.Opsworks() }
	afs["elastictranscoder"] = func() *diagram.Node { return aws.Media.ElasticTranscoder() }
	afs["elementalconductor"] = func() *diagram.Node { return aws.Media.ElementalConductor() }
	afs["elementalmedialive"] = func() *diagram.Node { return aws.Media.ElementalMedialive() }
	afs["elementalmediapackage"] = func() *diagram.Node { return aws.Media.ElementalMediapackage() }
	afs["elementalserver"] = func() *diagram.Node { return aws.Media.ElementalServer() }
	afs["elementaldelta"] = func() *diagram.Node { return aws.Media.ElementalDelta() }
	afs["elementallive"] = func() *diagram.Node { return aws.Media.ElementalLive() }
	afs["elementalmediaconnect"] = func() *diagram.Node { return aws.Media.ElementalMediaconnect() }
	afs["elementalmediaconvert"] = func() *diagram.Node { return aws.Media.ElementalMediaconvert() }
	afs["elementalmediastore"] = func() *diagram.Node { return aws.Media.ElementalMediastore() }
	afs["elementalmediatailor"] = func() *diagram.Node { return aws.Media.ElementalMediatailor() }
	afs["transferforsftp"] = func() *diagram.Node { return aws.Migration.TransferForSftp() }
	afs["datasync"] = func() *diagram.Node { return aws.Migration.Datasync() }
	afs["migrationandtransfer"] = func() *diagram.Node { return aws.Migration.MigrationAndTransfer() }
	afs["snowball"] = func() *diagram.Node { return aws.Storage.Snowball() }
	afs["migrationhub"] = func() *diagram.Node { return aws.Migration.MigrationHub() }
	afs["servermigrationservice"] = func() *diagram.Node { return aws.Migration.ServerMigrationService() }
	afs["snowballedge"] = func() *diagram.Node { return aws.Storage.SnowballEdge() }
	afs["snowmobile"] = func() *diagram.Node { return aws.Storage.Snowmobile() }
	afs["applicationdiscoveryservice"] = func() *diagram.Node { return aws.Migration.ApplicationDiscoveryService() }
	afs["cloudenduremigration"] = func() *diagram.Node { return aws.Migration.CloudendureMigration() }
	afs["sagemakertrainingjob"] = func() *diagram.Node { return aws.Ml.SagemakerTrainingJob() }
	afs["deepracer"] = func() *diagram.Node { return aws.Ml.Deepracer() }
	afs["sagemakernotebook"] = func() *diagram.Node { return aws.Ml.SagemakerNotebook() }
	afs["elasticinference"] = func() *diagram.Node { return aws.Ml.ElasticInference() }
	afs["polly"] = func() *diagram.Node { return aws.Ml.Polly() }
	afs["sagemakermodel"] = func() *diagram.Node { return aws.Ml.SagemakerModel() }
	afs["transcribe"] = func() *diagram.Node { return aws.Ml.Transcribe() }
	afs["apachemxnetonaws"] = func() *diagram.Node { return aws.Ml.ApacheMxnetOnAws() }
	afs["deeplearningamis"] = func() *diagram.Node { return aws.Ml.DeepLearningAmis() }
	afs["sagemaker"] = func() *diagram.Node { return aws.Ml.Sagemaker() }
	afs["tensorflowonaws"] = func() *diagram.Node { return aws.Ml.TensorflowOnAws() }
	afs["translate"] = func() *diagram.Node { return aws.Ml.Translate() }
	afs["comprehend"] = func() *diagram.Node { return aws.Ml.Comprehend() }
	afs["machinelearning"] = func() *diagram.Node { return elastic.Elasticsearch.MachineLearning() }
	afs["forecast"] = func() *diagram.Node { return aws.Ml.Forecast() }
	afs["lex"] = func() *diagram.Node { return aws.Ml.Lex() }
	afs["personalize"] = func() *diagram.Node { return aws.Ml.Personalize() }
	afs["rekognition"] = func() *diagram.Node { return aws.Ml.Rekognition() }
	afs["sagemakergroundtruth"] = func() *diagram.Node { return aws.Ml.SagemakerGroundTruth() }
	afs["textract"] = func() *diagram.Node { return aws.Ml.Textract() }
	afs["deeplearningcontainers"] = func() *diagram.Node { return aws.Ml.DeepLearningContainers() }
	afs["deeplens"] = func() *diagram.Node { return aws.Ml.Deeplens() }
	afs["amplify"] = func() *diagram.Node { return aws.Mobile.Amplify() }
	afs["apigatewayendpoint"] = func() *diagram.Node { return aws.Mobile.ApiGatewayEndpoint() }
	afs["devicefarm"] = func() *diagram.Node { return aws.Mobile.DeviceFarm() }
	afs["privatesubnet"] = func() *diagram.Node { return aws.Network.PrivateSubnet() }
	afs["publicsubnet"] = func() *diagram.Node { return aws.Network.PublicSubnet() }
	afs["sitetositevpn"] = func() *diagram.Node { return aws.Network.SiteToSiteVpn() }
	afs["networkingandcontentdelivery"] = func() *diagram.Node { return aws.Network.NetworkingAndContentDelivery() }
	afs["cloudfront"] = func() *diagram.Node { return aws.Network.Cloudfront() }
	afs["internetgateway"] = func() *diagram.Node { return oci.Network.InternetGateway() }
	afs["globalaccelerator"] = func() *diagram.Node { return aws.Network.GlobalAccelerator() }
	afs["routetable"] = func() *diagram.Node { return oci.Network.RouteTable() }
	afs["transitgateway"] = func() *diagram.Node { return aws.Network.TransitGateway() }
	afs["cloudmap"] = func() *diagram.Node { return aws.Network.CloudMap() }
	afs["endpoint"] = func() *diagram.Node { return elastic.Security.Endpoint() }
	afs["directconnect"] = func() *diagram.Node { return outscale.Compute.DirectConnect() }
	afs["elasticloadbalancing"] = func() *diagram.Node { return aws.Network.ElasticLoadBalancing() }
	afs["nacl"] = func() *diagram.Node { return aws.Network.Nacl() }
	afs["privatelink"] = func() *diagram.Node { return aws.Network.Privatelink() }
	afs["route53"] = func() *diagram.Node { return aws.Network.Route53() }
	afs["vpcpeering"] = func() *diagram.Node { return aws.Network.VpcPeering() }
	afs["appmesh"] = func() *diagram.Node { return aws.Network.AppMesh() }
	afs["clientvpn"] = func() *diagram.Node { return outscale.Network.ClientVpn() }
	afs["vpcrouter"] = func() *diagram.Node { return aws.Network.VpcRouter() }
	afs["vpc"] = func() *diagram.Node { return aws.Network.Vpc() }
	afs["braket"] = func() *diagram.Node { return aws.Quantum.Braket() }
	afs["robomakersimulator"] = func() *diagram.Node { return aws.Robotics.RobomakerSimulator() }
	afs["robomaker"] = func() *diagram.Node { return aws.Robotics.Robomaker() }
	afs["robotics"] = func() *diagram.Node { return aws.Robotics.Robotics() }
	afs["groundstation"] = func() *diagram.Node { return aws.Satellite.GroundStation() }
	afs["keymanagementservice"] = func() *diagram.Node { return gcp.Security.KeyManagementService() }
	afs["singlesignon"] = func() *diagram.Node { return aws.Security.SingleSignOn() }
	afs["clouddirectory"] = func() *diagram.Node { return aws.Security.CloudDirectory() }
	afs["guardduty"] = func() *diagram.Node { return aws.Security.Guardduty() }
	afs["identityandaccessmanagementiamawssts"] = func() *diagram.Node { return aws.Security.IdentityAndAccessManagementIamAwsSts() }
	afs["identityandaccessmanagementiam"] = func() *diagram.Node { return aws.Security.IdentityAndAccessManagementIam() }
	afs["secretsmanager"] = func() *diagram.Node { return aws.Security.SecretsManager() }
	afs["securityidentityandcompliance"] = func() *diagram.Node { return aws.Security.SecurityIdentityAndCompliance() }
	afs["shield"] = func() *diagram.Node { return aws.Security.Shield() }
	afs["cloudhsm"] = func() *diagram.Node { return aws.Security.Cloudhsm() }
	afs["certificatemanager"] = func() *diagram.Node { return aws.Security.CertificateManager() }
	afs["cognito"] = func() *diagram.Node { return aws.Security.Cognito() }
	afs["directoryservice"] = func() *diagram.Node { return aws.Security.DirectoryService() }
	afs["identityandaccessmanagementiamaccessanalyzer"] = func() *diagram.Node { return aws.Security.IdentityAndAccessManagementIamAccessAnalyzer() }
	afs["identityandaccessmanagementiampermissions"] = func() *diagram.Node { return aws.Security.IdentityAndAccessManagementIamPermissions() }
	afs["identityandaccessmanagementiamrole"] = func() *diagram.Node { return aws.Security.IdentityAndAccessManagementIamRole() }
	afs["resourceaccessmanager"] = func() *diagram.Node { return aws.Security.ResourceAccessManager() }
	afs["artifact"] = func() *diagram.Node { return aws.Security.Artifact() }
	afs["firewallmanager"] = func() *diagram.Node { return aws.Security.FirewallManager() }
	afs["inspector"] = func() *diagram.Node { return aws.Security.Inspector() }
	afs["macie"] = func() *diagram.Node { return aws.Security.Macie() }
	afs["securityhub"] = func() *diagram.Node { return aws.Security.SecurityHub() }
	afs["waf"] = func() *diagram.Node { return oci.Security.Waf() }
	afs["detective"] = func() *diagram.Node { return aws.Security.Detective() }
	afs["cloudenduredisasterrecovery"] = func() *diagram.Node { return aws.Storage.CloudendureDisasterRecovery() }
	afs["fsxforlustre"] = func() *diagram.Node { return aws.Storage.FsxForLustre() }
	afs["fsx"] = func() *diagram.Node { return aws.Storage.Fsx() }
	afs["backup"] = func() *diagram.Node { return aws.Storage.Backup() }
	afs["simplestorageservices3"] = func() *diagram.Node { return aws.Storage.SimpleStorageServiceS3() }
	afs["efsinfrequentaccessprimarybg"] = func() *diagram.Node { return aws.Storage.EfsInfrequentaccessPrimaryBg() }
	afs["fsxforwindowsfileserver"] = func() *diagram.Node { return aws.Storage.FsxForWindowsFileServer() }
	afs["storagegateway"] = func() *diagram.Node { return oci.Storage.StorageGateway() }
	afs["storage"] = func() *diagram.Node { return outscale.Storage.Storage() }
	afs["efsstandardprimarybg"] = func() *diagram.Node { return aws.Storage.EfsStandardPrimaryBg() }
	afs["elasticblockstoreebs"] = func() *diagram.Node { return aws.Storage.ElasticBlockStoreEbs() }
	afs["elasticfilesystemefs"] = func() *diagram.Node { return aws.Storage.ElasticFileSystemEfs() }
	afs["s3glacier"] = func() *diagram.Node { return aws.Storage.S3Glacier() }
	afs["analysisservices"] = func() *diagram.Node { return azure.Analytics.AnalysisServices() }
	afs["hdinsightclusters"] = func() *diagram.Node { return azure.Analytics.Hdinsightclusters() }
	afs["loganalyticsworkspaces"] = func() *diagram.Node { return azure.Analytics.LogAnalyticsWorkspaces() }
	afs["streamanalyticsjobs"] = func() *diagram.Node { return azure.Analytics.StreamAnalyticsJobs() }
	afs["dataexplorerclusters"] = func() *diagram.Node { return azure.Analytics.DataExplorerClusters() }
	afs["datafactories"] = func() *diagram.Node { return azure.Analytics.DataFactories() }
	afs["datalakestoregen1"] = func() *diagram.Node { return azure.Analytics.DataLakeStoreGen1() }
	afs["eventhubclusters"] = func() *diagram.Node { return azure.Analytics.EventHubClusters() }
	afs["eventhubs"] = func() *diagram.Node { return azure.Analytics.EventHubs() }
	afs["saphanaonazure"] = func() *diagram.Node { return azure.Compute.SapHanaOnAzure() }
	afs["vmlinux"] = func() *diagram.Node { return azure.Compute.VmLinux() }
	afs["availabilitysets"] = func() *diagram.Node { return azure.Compute.AvailabilitySets() }
	afs["batchaccounts"] = func() *diagram.Node { return azure.Compute.BatchAccounts() }
	afs["cloudservicesclassic"] = func() *diagram.Node { return azure.Compute.CloudServicesClassic() }
	afs["containerinstances"] = func() *diagram.Node { return azure.Compute.ContainerInstances() }
	afs["containerregistries"] = func() *diagram.Node { return azure.Compute.ContainerRegistries() }
	afs["disksnapshots"] = func() *diagram.Node { return azure.Compute.DiskSnapshots() }
	afs["functionapps"] = func() *diagram.Node { return azure.Compute.FunctionApps() }
	afs["kubernetesservices"] = func() *diagram.Node { return azure.Compute.KubernetesServices() }
	afs["servicefabricclusters"] = func() *diagram.Node { return azure.Compute.ServiceFabricClusters() }
	afs["vmclassic"] = func() *diagram.Node { return azure.Compute.VmClassic() }
	afs["vmimages"] = func() *diagram.Node { return azure.Compute.VmImages() }
	afs["vm"] = func() *diagram.Node { return oci.Compute.Vm() }
	afs["cloudservices"] = func() *diagram.Node { return azure.Compute.CloudServices() }
	afs["disks"] = func() *diagram.Node { return azure.Compute.Disks() }
	afs["meshapplications"] = func() *diagram.Node { return azure.Compute.MeshApplications() }
	afs["citrixvirtualdesktopsessentials"] = func() *diagram.Node { return azure.Compute.CitrixVirtualDesktopsEssentials() }
	afs["cloudsimplevirtualmachines"] = func() *diagram.Node { return azure.Compute.CloudsimpleVirtualMachines() }
	afs["vmwindows"] = func() *diagram.Node { return azure.Compute.VmWindows() }
	afs["blobstorage"] = func() *diagram.Node { return azure.Storage.BlobStorage() }
	afs["cosmosdb"] = func() *diagram.Node { return azure.Database.CosmosDb() }
	afs["databaseformariadbservers"] = func() *diagram.Node { return azure.Database.DatabaseForMariadbServers() }
	afs["databaseforpostgresqlservers"] = func() *diagram.Node { return azure.Database.DatabaseForPostgresqlServers() }
	afs["sqlservers"] = func() *diagram.Node { return azure.Database.SqlServers() }
	afs["datalake"] = func() *diagram.Node { return azure.Database.DataLake() }
	afs["elasticdatabasepools"] = func() *diagram.Node { return azure.Database.ElasticDatabasePools() }
	afs["elasticjobagents"] = func() *diagram.Node { return azure.Database.ElasticJobAgents() }
	afs["manageddatabases"] = func() *diagram.Node { return azure.Database.ManagedDatabases() }
	afs["sqldatabases"] = func() *diagram.Node { return azure.Database.SqlDatabases() }
	afs["virtualclusters"] = func() *diagram.Node { return azure.Database.VirtualClusters() }
	afs["virtualdatacenter"] = func() *diagram.Node { return azure.Database.VirtualDatacenter() }
	afs["cacheforredis"] = func() *diagram.Node { return azure.Database.CacheForRedis() }
	afs["databaseformysqlservers"] = func() *diagram.Node { return azure.Database.DatabaseForMysqlServers() }
	afs["sqldatawarehouse"] = func() *diagram.Node { return azure.Database.SqlDatawarehouse() }
	afs["sqlmanagedinstances"] = func() *diagram.Node { return azure.Database.SqlManagedInstances() }
	afs["sqlserverstretchdatabases"] = func() *diagram.Node { return azure.Database.SqlServerStretchDatabases() }
	afs["devops"] = func() *diagram.Node { return azure.Devops.Devops() }
	afs["devtestlabs"] = func() *diagram.Node { return azure.Devops.DevtestLabs() }
	afs["pipelines"] = func() *diagram.Node { return azure.Devops.Pipelines() }
	afs["repos"] = func() *diagram.Node { return azure.Devops.Repos() }
	afs["testplans"] = func() *diagram.Node { return azure.Devops.TestPlans() }
	afs["applicationinsights"] = func() *diagram.Node { return azure.Devops.ApplicationInsights() }
	afs["artifacts"] = func() *diagram.Node { return azure.Devops.Artifacts() }
	afs["boards"] = func() *diagram.Node { return azure.Devops.Boards() }
	afs["userprivacy"] = func() *diagram.Node { return azure.General.Userprivacy() }
	afs["allresources"] = func() *diagram.Node { return azure.General.Allresources() }
	afs["resource"] = func() *diagram.Node { return azure.General.Resource() }
	afs["tags"] = func() *diagram.Node { return azure.General.Tags() }
	afs["twousericon"] = func() *diagram.Node { return azure.General.Twousericon() }
	afs["userhealthicon"] = func() *diagram.Node { return azure.General.Userhealthicon() }
	afs["supportrequests"] = func() *diagram.Node { return azure.General.Supportrequests() }
	afs["templates"] = func() *diagram.Node { return azure.General.Templates() }
	afs["usericon"] = func() *diagram.Node { return azure.General.Usericon() }
	afs["managementgroups"] = func() *diagram.Node { return azure.General.Managementgroups() }
	afs["servicehealth"] = func() *diagram.Node { return azure.General.Servicehealth() }
	afs["shareddashboard"] = func() *diagram.Node { return azure.General.Shareddashboard() }
	afs["subscriptions"] = func() *diagram.Node { return azure.General.Subscriptions() }
	afs["userresource"] = func() *diagram.Node { return azure.General.Userresource() }
	afs["recent"] = func() *diagram.Node { return azure.General.Recent() }
	afs["reservations"] = func() *diagram.Node { return azure.General.Reservations() }
	afs["whatsnew"] = func() *diagram.Node { return azure.General.Whatsnew() }
	afs["azurehome"] = func() *diagram.Node { return azure.General.Azurehome() }
	afs["helpsupport"] = func() *diagram.Node { return azure.General.Helpsupport() }
	afs["information"] = func() *diagram.Node { return azure.General.Information() }
	afs["quickstartcenter"] = func() *diagram.Node { return azure.General.Quickstartcenter() }
	afs["resourcegroups"] = func() *diagram.Node { return azure.General.Resourcegroups() }
	afs["tag"] = func() *diagram.Node { return azure.General.Tag() }
	afs["conditionalaccess"] = func() *diagram.Node { return azure.Identity.ConditionalAccess() }
	afs["identitygovernance"] = func() *diagram.Node { return azure.Identity.IdentityGovernance() }
	afs["informationprotection"] = func() *diagram.Node { return azure.Identity.InformationProtection() }
	afs["accessreview"] = func() *diagram.Node { return azure.Identity.AccessReview() }
	afs["activedirectoryconnecthealth"] = func() *diagram.Node { return azure.Identity.ActiveDirectoryConnectHealth() }
	afs["addomainservices"] = func() *diagram.Node { return azure.Identity.AdDomainServices() }
	afs["adprivilegedidentitymanagement"] = func() *diagram.Node { return azure.Identity.AdPrivilegedIdentityManagement() }
	afs["appregistrations"] = func() *diagram.Node { return azure.Identity.AppRegistrations() }
	afs["managedidentities"] = func() *diagram.Node { return azure.Identity.ManagedIdentities() }
	afs["activedirectory"] = func() *diagram.Node { return azure.Identity.ActiveDirectory() }
	afs["adb2c"] = func() *diagram.Node { return azure.Identity.AdB2C() }
	afs["adidentityprotection"] = func() *diagram.Node { return azure.Identity.AdIdentityProtection() }
	afs["enterpriseapplications"] = func() *diagram.Node { return azure.Identity.EnterpriseApplications() }
	afs["logicapps"] = func() *diagram.Node { return azure.Integration.LogicApps() }
	afs["integrationserviceenvironments"] = func() *diagram.Node { return azure.Integration.IntegrationServiceEnvironments() }
	afs["servicebusrelays"] = func() *diagram.Node { return azure.Integration.ServiceBusRelays() }
	afs["appconfiguration"] = func() *diagram.Node { return azure.Integration.AppConfiguration() }
	afs["eventgridtopics"] = func() *diagram.Node { return azure.Integration.EventGridTopics() }
	afs["integrationaccounts"] = func() *diagram.Node { return azure.Integration.IntegrationAccounts() }
	afs["sendgridaccounts"] = func() *diagram.Node { return azure.Integration.SendgridAccounts() }
	afs["servicebus"] = func() *diagram.Node { return azure.Integration.ServiceBus() }
	afs["servicecatalogmanagedapplicationdefinitions"] = func() *diagram.Node { return azure.Integration.ServiceCatalogManagedApplicationDefinitions() }
	afs["storsimpledevicemanagers"] = func() *diagram.Node { return azure.Storage.StorsimpleDeviceManagers() }
	afs["apiforfhir"] = func() *diagram.Node { return azure.Integration.ApiForFhir() }
	afs["apimanagement"] = func() *diagram.Node { return azure.Integration.ApiManagement() }
	afs["datacatalog"] = func() *diagram.Node { return gcp.Analytics.DataCatalog() }
	afs["softwareasaservice"] = func() *diagram.Node { return azure.Integration.SoftwareAsAService() }
	afs["eventgriddomains"] = func() *diagram.Node { return azure.Integration.EventGridDomains() }
	afs["eventgridsubscriptions"] = func() *diagram.Node { return azure.Integration.EventGridSubscriptions() }
	afs["logicappscustomconnector"] = func() *diagram.Node { return azure.Integration.LogicAppsCustomConnector() }
	afs["windows10iotcoreservices"] = func() *diagram.Node { return azure.Iot.Windows10IotCoreServices() }
	afs["iothub"] = func() *diagram.Node { return azure.Iot.IotHub() }
	afs["maps"] = func() *diagram.Node { return elastic.Elasticsearch.Maps() }
	afs["timeseriesinsightsenvironments"] = func() *diagram.Node { return azure.Iot.TimeSeriesInsightsEnvironments() }
	afs["timeseriesinsightseventssources"] = func() *diagram.Node { return azure.Iot.TimeSeriesInsightsEventsSources() }
	afs["sphere"] = func() *diagram.Node { return azure.Iot.Sphere() }
	afs["deviceprovisioningservices"] = func() *diagram.Node { return azure.Iot.DeviceProvisioningServices() }
	afs["digitaltwins"] = func() *diagram.Node { return azure.Iot.DigitalTwins() }
	afs["iotcentralapplications"] = func() *diagram.Node { return azure.Iot.IotCentralApplications() }
	afs["iothubsecurity"] = func() *diagram.Node { return azure.Iot.IotHubSecurity() }
	afs["databasemigrationservices"] = func() *diagram.Node { return azure.Migration.DatabaseMigrationServices() }
	afs["migrationprojects"] = func() *diagram.Node { return azure.Migration.MigrationProjects() }
	afs["recoveryservicesvaults"] = func() *diagram.Node { return azure.Migration.RecoveryServicesVaults() }
	afs["machinelearningstudioworkspaces"] = func() *diagram.Node { return azure.Ml.MachineLearningStudioWorkspaces() }
	afs["batchai"] = func() *diagram.Node { return azure.Ml.BatchAi() }
	afs["botservices"] = func() *diagram.Node { return azure.Ml.BotServices() }
	afs["cognitiveservices"] = func() *diagram.Node { return azure.Ml.CognitiveServices() }
	afs["genomicsaccounts"] = func() *diagram.Node { return azure.Ml.GenomicsAccounts() }
	afs["machinelearningserviceworkspaces"] = func() *diagram.Node { return azure.Ml.MachineLearningServiceWorkspaces() }
	afs["machinelearningstudiowebserviceplans"] = func() *diagram.Node { return azure.Ml.MachineLearningStudioWebServicePlans() }
	afs["machinelearningstudiowebservices"] = func() *diagram.Node { return azure.Ml.MachineLearningStudioWebServices() }
	afs["appservicemobile"] = func() *diagram.Node { return azure.Mobile.AppServiceMobile() }
	afs["mobileengagement"] = func() *diagram.Node { return azure.Mobile.MobileEngagement() }
	afs["notificationhubs"] = func() *diagram.Node { return azure.Mobile.NotificationHubs() }
	afs["virtualwans"] = func() *diagram.Node { return azure.Network.VirtualWans() }
	afs["applicationgateway"] = func() *diagram.Node { return azure.Network.ApplicationGateway() }
	afs["frontdoors"] = func() *diagram.Node { return azure.Network.FrontDoors() }
	afs["loadbalancers"] = func() *diagram.Node { return azure.Network.LoadBalancers() }
	afs["networkinterfaces"] = func() *diagram.Node { return azure.Network.NetworkInterfaces() }
	afs["networkwatcher"] = func() *diagram.Node { return azure.Network.NetworkWatcher() }
	afs["routetables"] = func() *diagram.Node { return azure.Network.RouteTables() }
	afs["virtualnetworkgateways"] = func() *diagram.Node { return azure.Network.VirtualNetworkGateways() }
	afs["connections"] = func() *diagram.Node { return azure.Network.Connections() }
	afs["dnsprivatezones"] = func() *diagram.Node { return azure.Network.DnsPrivateZones() }
	afs["dnszones"] = func() *diagram.Node { return azure.Network.DnsZones() }
	afs["networksecuritygroupsclassic"] = func() *diagram.Node { return azure.Network.NetworkSecurityGroupsClassic() }
	afs["onpremisesdatagateways"] = func() *diagram.Node { return azure.Network.OnPremisesDataGateways() }
	afs["virtualnetworks"] = func() *diagram.Node { return azure.Network.VirtualNetworks() }
	afs["applicationsecuritygroups"] = func() *diagram.Node { return azure.Network.ApplicationSecurityGroups() }
	afs["cdnprofiles"] = func() *diagram.Node { return azure.Network.CdnProfiles() }
	afs["expressroutecircuits"] = func() *diagram.Node { return azure.Network.ExpressrouteCircuits() }
	afs["serviceendpointpolicies"] = func() *diagram.Node { return azure.Network.ServiceEndpointPolicies() }
	afs["virtualnetworkclassic"] = func() *diagram.Node { return azure.Network.VirtualNetworkClassic() }
	afs["routefilters"] = func() *diagram.Node { return azure.Network.RouteFilters() }
	afs["trafficmanagerprofiles"] = func() *diagram.Node { return azure.Network.TrafficManagerProfiles() }
	afs["ddosprotectionplans"] = func() *diagram.Node { return azure.Network.DdosProtectionPlans() }
	afs["firewall"] = func() *diagram.Node { return outscale.Security.Firewall() }
	afs["localnetworkgateways"] = func() *diagram.Node { return azure.Network.LocalNetworkGateways() }
	afs["publicipaddresses"] = func() *diagram.Node { return azure.Network.PublicIpAddresses() }
	afs["reservedipaddressesclassic"] = func() *diagram.Node { return azure.Network.ReservedIpAddressesClassic() }
	afs["keyvaults"] = func() *diagram.Node { return azure.Security.KeyVaults() }
	afs["sentinel"] = func() *diagram.Node { return azure.Security.Sentinel() }
	afs["azurefxtedgefiler"] = func() *diagram.Node { return azure.Storage.Azurefxtedgefiler() }
	afs["databoxedgedataboxgateway"] = func() *diagram.Node { return azure.Storage.DataBoxEdgeDataBoxGateway() }
	afs["netappfiles"] = func() *diagram.Node { return azure.Storage.NetappFiles() }
	afs["tablestorage"] = func() *diagram.Node { return azure.Storage.TableStorage() }
	afs["archivestorage"] = func() *diagram.Node { return azure.Storage.ArchiveStorage() }
	afs["databox"] = func() *diagram.Node { return azure.Storage.DataBox() }
	afs["storageaccountsclassic"] = func() *diagram.Node { return azure.Storage.StorageAccountsClassic() }
	afs["storageaccounts"] = func() *diagram.Node { return azure.Storage.StorageAccounts() }
	afs["storageexplorer"] = func() *diagram.Node { return azure.Storage.StorageExplorer() }
	afs["generalstorage"] = func() *diagram.Node { return azure.Storage.GeneralStorage() }
	afs["queuesstorage"] = func() *diagram.Node { return azure.Storage.QueuesStorage() }
	afs["datalakestorage"] = func() *diagram.Node { return azure.Storage.DataLakeStorage() }
	afs["storagesyncservices"] = func() *diagram.Node { return azure.Storage.StorageSyncServices() }
	afs["storsimpledatamanagers"] = func() *diagram.Node { return azure.Storage.StorsimpleDataManagers() }
	afs["notificationhubnamespaces"] = func() *diagram.Node { return azure.Web.NotificationHubNamespaces() }
	afs["search"] = func() *diagram.Node { return oci.Monitoring.Search() }
	afs["signalr"] = func() *diagram.Node { return azure.Web.Signalr() }
	afs["apiconnections"] = func() *diagram.Node { return azure.Web.ApiConnections() }
	afs["appservicecertificates"] = func() *diagram.Node { return azure.Web.AppServiceCertificates() }
	afs["appservicedomains"] = func() *diagram.Node { return azure.Web.AppServiceDomains() }
	afs["appservices"] = func() *diagram.Node { return azure.Web.AppServices() }
	afs["appserviceenvironments"] = func() *diagram.Node { return azure.Web.AppServiceEnvironments() }
	afs["appserviceplans"] = func() *diagram.Node { return azure.Web.AppServicePlans() }
	afs["mediaservices"] = func() *diagram.Node { return azure.Web.MediaServices() }
	afs["monitoring"] = func() *diagram.Node { return elastic.Elasticsearch.Monitoring() }
	afs["securitysettings"] = func() *diagram.Node { return elastic.Elasticsearch.SecuritySettings() }
	afs["sql"] = func() *diagram.Node { return generic.Database.Sql() }
	afs["alerting"] = func() *diagram.Node { return elastic.Elasticsearch.Alerting() }
	afs["beats"] = func() *diagram.Node { return elastic.Elasticsearch.Beats() }
	afs["kibana"] = func() *diagram.Node { return elastic.Elasticsearch.Kibana() }
	afs["logstash"] = func() *diagram.Node { return elastic.Elasticsearch.Logstash() }
	afs["appsearch"] = func() *diagram.Node { return elastic.Enterprisesearch.AppSearch() }
	afs["enterprisesearch"] = func() *diagram.Node { return elastic.Enterprisesearch.EnterpriseSearch() }
	afs["sitesearch"] = func() *diagram.Node { return elastic.Enterprisesearch.SiteSearch() }
	afs["workplacesearch"] = func() *diagram.Node { return elastic.Enterprisesearch.WorkplaceSearch() }
	afs["apm"] = func() *diagram.Node { return elastic.Observability.Apm() }
	afs["logs"] = func() *diagram.Node { return elastic.Observability.Logs() }
	afs["metrics"] = func() *diagram.Node { return elastic.Observability.Metrics() }
	afs["observability"] = func() *diagram.Node { return elastic.Observability.Observability() }
	afs["uptime"] = func() *diagram.Node { return elastic.Observability.Uptime() }
	afs["eck"] = func() *diagram.Node { return elastic.Orchestration.Eck() }
	afs["ece"] = func() *diagram.Node { return elastic.Orchestration.Ece() }
	afs["cloud"] = func() *diagram.Node { return elastic.Saas.Cloud() }
	afs["elastic"] = func() *diagram.Node { return elastic.Saas.Elastic() }
	afs["security"] = func() *diagram.Node { return elastic.Security.Security() }
	afs["siem"] = func() *diagram.Node { return elastic.Security.Siem() }
	afs["firebase"] = func() *diagram.Node { return firebase.Base.Firebase() }
	afs["authentication"] = func() *diagram.Node { return firebase.Develop.Authentication() }
	afs["firestore"] = func() *diagram.Node { return gcp.Database.Firestore() }
	afs["functions"] = func() *diagram.Node { return oci.Compute.Functions() }
	afs["hosting"] = func() *diagram.Node { return firebase.Develop.Hosting() }
	afs["mlkit"] = func() *diagram.Node { return firebase.Develop.MlKit() }
	afs["realtimedatabase"] = func() *diagram.Node { return firebase.Develop.RealtimeDatabase() }
	afs["extensions"] = func() *diagram.Node { return firebase.Extentions.Extensions() }
	afs["invites"] = func() *diagram.Node { return firebase.Grow.Invites() }
	afs["messaging"] = func() *diagram.Node { return firebase.Grow.Messaging() }
	afs["predictions"] = func() *diagram.Node { return firebase.Grow.Predictions() }
	afs["remoteconfig"] = func() *diagram.Node { return firebase.Grow.RemoteConfig() }
	afs["abtesting"] = func() *diagram.Node { return firebase.Grow.AbTesting() }
	afs["appindexing"] = func() *diagram.Node { return firebase.Grow.AppIndexing() }
	afs["dynamiclinks"] = func() *diagram.Node { return firebase.Grow.DynamicLinks() }
	afs["inappmessaging"] = func() *diagram.Node { return firebase.Grow.InAppMessaging() }
	afs["testlab"] = func() *diagram.Node { return gcp.Devtools.TestLab() }
	afs["appdistribution"] = func() *diagram.Node { return firebase.Quality.AppDistribution() }
	afs["crashreporting"] = func() *diagram.Node { return firebase.Quality.CrashReporting() }
	afs["crashlytics"] = func() *diagram.Node { return firebase.Quality.Crashlytics() }
	afs["performancemonitoring"] = func() *diagram.Node { return firebase.Quality.PerformanceMonitoring() }
	afs["composer"] = func() *diagram.Node { return gcp.Analytics.Composer() }
	afs["datafusion"] = func() *diagram.Node { return gcp.Analytics.DataFusion() }
	afs["datalab"] = func() *diagram.Node { return gcp.Analytics.Datalab() }
	afs["dataproc"] = func() *diagram.Node { return gcp.Analytics.Dataproc() }
	afs["bigquery"] = func() *diagram.Node { return gcp.Analytics.Bigquery() }
	afs["dataflow"] = func() *diagram.Node { return gcp.Analytics.Dataflow() }
	afs["dataprep"] = func() *diagram.Node { return gcp.Analytics.Dataprep() }
	afs["genomics"] = func() *diagram.Node { return gcp.Analytics.Genomics() }
	afs["pubsub"] = func() *diagram.Node { return gcp.Analytics.Pubsub() }
	afs["endpoints"] = func() *diagram.Node { return gcp.Api.Endpoints() }
	afs["containeroptimizedos"] = func() *diagram.Node { return gcp.Compute.ContainerOptimizedOs() }
	afs["gkeonprem"] = func() *diagram.Node { return gcp.Compute.GkeOnPrem() }
	afs["gpu"] = func() *diagram.Node { return gcp.Compute.Gpu() }
	afs["kubernetesengine"] = func() *diagram.Node { return gcp.Compute.KubernetesEngine() }
	afs["run"] = func() *diagram.Node { return gcp.Compute.Run() }
	afs["appengine"] = func() *diagram.Node { return gcp.Compute.AppEngine() }
	afs["computeengine"] = func() *diagram.Node { return gcp.Compute.ComputeEngine() }
	afs["datastore"] = func() *diagram.Node { return gcp.Database.Datastore() }
	afs["memorystore"] = func() *diagram.Node { return gcp.Database.Memorystore() }
	afs["spanner"] = func() *diagram.Node { return gcp.Database.Spanner() }
	afs["bigtable"] = func() *diagram.Node { return gcp.Database.Bigtable() }
	afs["ideplugins"] = func() *diagram.Node { return gcp.Devtools.IdePlugins() }
	afs["sourcerepositories"] = func() *diagram.Node { return gcp.Devtools.SourceRepositories() }
	afs["code"] = func() *diagram.Node { return gcp.Devtools.Code() }
	afs["gradleappengineplugin"] = func() *diagram.Node { return gcp.Devtools.GradleAppEnginePlugin() }
	afs["toolsforvisualstudio"] = func() *diagram.Node { return gcp.Devtools.ToolsForVisualStudio() }
	afs["codeforintellij"] = func() *diagram.Node { return gcp.Devtools.CodeForIntellij() }
	afs["scheduler"] = func() *diagram.Node { return gcp.Devtools.Scheduler() }
	afs["sdk"] = func() *diagram.Node { return gcp.Devtools.Sdk() }
	afs["toolsforpowershell"] = func() *diagram.Node { return gcp.Devtools.ToolsForPowershell() }
	afs["build"] = func() *diagram.Node { return gcp.Devtools.Build() }
	afs["mavenappengineplugin"] = func() *diagram.Node { return gcp.Devtools.MavenAppEnginePlugin() }
	afs["tasks"] = func() *diagram.Node { return gcp.Devtools.Tasks() }
	afs["toolsforeclipse"] = func() *diagram.Node { return gcp.Devtools.ToolsForEclipse() }
	afs["transferappliance"] = func() *diagram.Node { return gcp.Migration.TransferAppliance() }
	afs["inferenceapi"] = func() *diagram.Node { return gcp.Ml.InferenceApi() }
	afs["naturallanguageapi"] = func() *diagram.Node { return gcp.Ml.NaturalLanguageApi() }
	afs["recommendationsai"] = func() *diagram.Node { return gcp.Ml.RecommendationsAi() }
	afs["speechtotext"] = func() *diagram.Node { return gcp.Ml.SpeechToText() }
	afs["advancedsolutionslab"] = func() *diagram.Node { return gcp.Ml.AdvancedSolutionsLab() }
	afs["aihub"] = func() *diagram.Node { return gcp.Ml.AiHub() }
	afs["automl"] = func() *diagram.Node { return gcp.Ml.Automl() }
	afs["tpu"] = func() *diagram.Node { return gcp.Ml.Tpu() }
	afs["videointelligenceapi"] = func() *diagram.Node { return gcp.Ml.VideoIntelligenceApi() }
	afs["aiplatform"] = func() *diagram.Node { return gcp.Ml.AiPlatform() }
	afs["automltranslation"] = func() *diagram.Node { return gcp.Ml.AutomlTranslation() }
	afs["jobsapi"] = func() *diagram.Node { return gcp.Ml.JobsApi() }
	afs["translationapi"] = func() *diagram.Node { return gcp.Ml.TranslationApi() }
	afs["aiplatformdatalabelingservice"] = func() *diagram.Node { return gcp.Ml.AiPlatformDataLabelingService() }
	afs["automlnaturallanguage"] = func() *diagram.Node { return gcp.Ml.AutomlNaturalLanguage() }
	afs["dialogflowenterpriseedition"] = func() *diagram.Node { return gcp.Ml.DialogFlowEnterpriseEdition() }
	afs["texttospeech"] = func() *diagram.Node { return gcp.Ml.TextToSpeech() }
	afs["visionapi"] = func() *diagram.Node { return gcp.Ml.VisionApi() }
	afs["automltables"] = func() *diagram.Node { return gcp.Ml.AutomlTables() }
	afs["automlvideointelligence"] = func() *diagram.Node { return gcp.Ml.AutomlVideoIntelligence() }
	afs["automlvision"] = func() *diagram.Node { return gcp.Ml.AutomlVision() }
	afs["loadbalancing"] = func() *diagram.Node { return gcp.Network.LoadBalancing() }
	afs["trafficdirector"] = func() *diagram.Node { return gcp.Network.TrafficDirector() }
	afs["vpn"] = func() *diagram.Node { return oci.Connectivity.Vpn() }
	afs["dedicatedinterconnect"] = func() *diagram.Node { return gcp.Network.DedicatedInterconnect() }
	afs["nat"] = func() *diagram.Node { return gcp.Network.Nat() }
	afs["network"] = func() *diagram.Node { return gcp.Network.Network() }
	afs["partnerinterconnect"] = func() *diagram.Node { return gcp.Network.PartnerInterconnect() }
	afs["router"] = func() *diagram.Node { return generic.Network.Router() }
	afs["standardnetworktier"] = func() *diagram.Node { return gcp.Network.StandardNetworkTier() }
	afs["armor"] = func() *diagram.Node { return gcp.Network.Armor() }
	afs["externalipaddresses"] = func() *diagram.Node { return gcp.Network.ExternalIpAddresses() }
	afs["firewallrules"] = func() *diagram.Node { return gcp.Network.FirewallRules() }
	afs["premiumnetworktier"] = func() *diagram.Node { return gcp.Network.PremiumNetworkTier() }
	afs["routes"] = func() *diagram.Node { return gcp.Network.Routes() }
	afs["iap"] = func() *diagram.Node { return gcp.Security.Iap() }
	afs["resourcemanager"] = func() *diagram.Node { return gcp.Security.ResourceManager() }
	afs["securitycommandcenter"] = func() *diagram.Node { return gcp.Security.SecurityCommandCenter() }
	afs["securityscanner"] = func() *diagram.Node { return gcp.Security.SecurityScanner() }
	afs["iam"] = func() *diagram.Node { return gcp.Security.Iam() }
	afs["filestore"] = func() *diagram.Node { return gcp.Storage.Filestore() }
	afs["persistentdisk"] = func() *diagram.Node { return gcp.Storage.PersistentDisk() }
	afs["blank"] = func() *diagram.Node { return generic.Blank.Blank() }
	afs["rack"] = func() *diagram.Node { return generic.Compute.Rack() }
	afs["mobile"] = func() *diagram.Node { return generic.Device.Mobile() }
	afs["tablet"] = func() *diagram.Node { return generic.Device.Tablet() }
	afs["switch"] = func() *diagram.Node { return generic.Network.Switch() }
	afs["ubuntu"] = func() *diagram.Node { return generic.Os.Ubuntu() }
	afs["windows"] = func() *diagram.Node { return generic.Os.Windows() }
	afs["android"] = func() *diagram.Node { return generic.Os.Android() }
	afs["centos"] = func() *diagram.Node { return generic.Os.Centos() }
	afs["ios"] = func() *diagram.Node { return generic.Os.Ios() }
	afs["linuxgeneral"] = func() *diagram.Node { return generic.Os.LinuxGeneral() }
	afs["suse"] = func() *diagram.Node { return generic.Os.Suse() }
	afs["datacenter"] = func() *diagram.Node { return generic.Place.Datacenter() }
	afs["virtualbox"] = func() *diagram.Node { return generic.Virtualization.Virtualbox() }
	afs["vmware"] = func() *diagram.Node { return generic.Virtualization.Vmware() }
	afs["xen"] = func() *diagram.Node { return generic.Virtualization.Xen() }
	afs["hpa"] = func() *diagram.Node { return k8s.Clusterconfig.Hpa() }
	afs["limits"] = func() *diagram.Node { return k8s.Clusterconfig.Limits() }
	afs["quota"] = func() *diagram.Node { return k8s.Clusterconfig.Quota() }
	afs["cronjob"] = func() *diagram.Node { return k8s.Compute.Cronjob() }
	afs["deploy"] = func() *diagram.Node { return k8s.Compute.Deploy() }
	afs["ds"] = func() *diagram.Node { return k8s.Compute.Ds() }
	afs["job"] = func() *diagram.Node { return k8s.Compute.Job() }
	afs["pod"] = func() *diagram.Node { return k8s.Compute.Pod() }
	afs["rs"] = func() *diagram.Node { return k8s.Compute.Rs() }
	afs["sts"] = func() *diagram.Node { return k8s.Compute.Sts() }
	afs["api"] = func() *diagram.Node { return k8s.Controlplane.Api() }
	afs["ccm"] = func() *diagram.Node { return k8s.Controlplane.CCM() }
	afs["cm"] = func() *diagram.Node { return k8s.Podconfig.Cm() }
	afs["kproxy"] = func() *diagram.Node { return k8s.Controlplane.KProxy() }
	afs["kubelet"] = func() *diagram.Node { return k8s.Controlplane.Kubelet() }
	afs["sched"] = func() *diagram.Node { return k8s.Controlplane.Sched() }
	afs["helm"] = func() *diagram.Node { return openstack.Deployment.Helm() }
	afs["krew"] = func() *diagram.Node { return k8s.Ecosystem.Krew() }
	afs["kustomize"] = func() *diagram.Node { return k8s.Ecosystem.Kustomize() }
	afs["ns"] = func() *diagram.Node { return k8s.Group.Ns() }
	afs["master"] = func() *diagram.Node { return k8s.Infra.Master() }
	afs["node"] = func() *diagram.Node { return k8s.Infra.Node() }
	afs["ep"] = func() *diagram.Node { return k8s.Network.Ep() }
	afs["ing"] = func() *diagram.Node { return k8s.Network.Ing() }
	afs["netpol"] = func() *diagram.Node { return k8s.Network.Netpol() }
	afs["svc"] = func() *diagram.Node { return k8s.Network.Svc() }
	afs["crd"] = func() *diagram.Node { return k8s.Others.Crd() }
	afs["psp"] = func() *diagram.Node { return k8s.Others.Psp() }
	afs["secret"] = func() *diagram.Node { return k8s.Podconfig.Secret() }
	afs["role"] = func() *diagram.Node { return k8s.Rbac.Role() }
	afs["sa"] = func() *diagram.Node { return k8s.Rbac.Sa() }
	afs["crole"] = func() *diagram.Node { return k8s.Rbac.CRole() }
	afs["crb"] = func() *diagram.Node { return k8s.Rbac.Crb() }
	afs["group"] = func() *diagram.Node { return k8s.Rbac.Group() }
	afs["rb"] = func() *diagram.Node { return k8s.Rbac.Rb() }
	afs["vol"] = func() *diagram.Node { return k8s.Storage.Vol() }
	afs["pv"] = func() *diagram.Node { return k8s.Storage.Pv() }
	afs["pvc"] = func() *diagram.Node { return k8s.Storage.Pvc() }
	afs["sc"] = func() *diagram.Node { return k8s.Storage.Sc() }
	afs["bm"] = func() *diagram.Node { return oci.Compute.Bm() }
	afs["container"] = func() *diagram.Node { return oci.Compute.Container() }
	afs["ocir"] = func() *diagram.Node { return oci.Compute.Ocir() }
	afs["oke"] = func() *diagram.Node { return oci.Compute.Oke() }
	afs["autoscalewhite"] = func() *diagram.Node { return oci.Compute.AutoscaleWhite() }
	afs["autoscale"] = func() *diagram.Node { return oci.Compute.Autoscale() }
	afs["ocirwhite"] = func() *diagram.Node { return oci.Compute.OcirWhite() }
	afs["functionswhite"] = func() *diagram.Node { return oci.Compute.FunctionsWhite() }
	afs["instancepools"] = func() *diagram.Node { return oci.Compute.InstancePools() }
	afs["vmwhite"] = func() *diagram.Node { return oci.Compute.VmWhite() }
	afs["bmwhite"] = func() *diagram.Node { return oci.Compute.BmWhite() }
	afs["containerwhite"] = func() *diagram.Node { return oci.Compute.ContainerWhite() }
	afs["instancepoolswhite"] = func() *diagram.Node { return oci.Compute.InstancePoolsWhite() }
	afs["okewhite"] = func() *diagram.Node { return oci.Compute.OkeWhite() }
	afs["disconnectedregions"] = func() *diagram.Node { return oci.Connectivity.DisconnectedRegions() }
	afs["customerpremise"] = func() *diagram.Node { return oci.Connectivity.CustomerPremise() }
	afs["customerdatacntrwhite"] = func() *diagram.Node { return oci.Connectivity.CustomerDatacntrWhite() }
	afs["customerpremisewhite"] = func() *diagram.Node { return oci.Connectivity.CustomerPremiseWhite() }
	afs["dnswhite"] = func() *diagram.Node { return oci.Connectivity.DnsWhite() }
	afs["fastconnectwhite"] = func() *diagram.Node { return oci.Connectivity.FastConnectWhite() }
	afs["customerdatacenter"] = func() *diagram.Node { return oci.Connectivity.CustomerDatacenter() }
	afs["backbone"] = func() *diagram.Node { return programming.Framework.Backbone() }
	afs["cdnwhite"] = func() *diagram.Node { return oci.Connectivity.CdnWhite() }
	afs["disconnectedregionswhite"] = func() *diagram.Node { return oci.Connectivity.DisconnectedRegionsWhite() }
	afs["fastconnect"] = func() *diagram.Node { return oci.Connectivity.FastConnect() }
	afs["natgatewaywhite"] = func() *diagram.Node { return oci.Connectivity.NatGatewayWhite() }
	afs["vpnwhite"] = func() *diagram.Node { return oci.Connectivity.VpnWhite() }
	afs["backbonewhite"] = func() *diagram.Node { return oci.Connectivity.BackboneWhite() }
	afs["dcatwhite"] = func() *diagram.Node { return oci.Database.DcatWhite() }
	afs["diswhite"] = func() *diagram.Node { return oci.Database.DisWhite() }
	afs["dms"] = func() *diagram.Node { return oci.Database.Dms() }
	afs["sciencewhite"] = func() *diagram.Node { return oci.Database.ScienceWhite() }
	afs["streamwhite"] = func() *diagram.Node { return oci.Database.StreamWhite() }
	afs["bigdataservicewhite"] = func() *diagram.Node { return oci.Database.BigdataServiceWhite() }
	afs["science"] = func() *diagram.Node { return oci.Database.Science() }
	afs["stream"] = func() *diagram.Node { return oci.Database.Stream() }
	afs["autonomouswhite"] = func() *diagram.Node { return oci.Database.AutonomousWhite() }
	afs["autonomous"] = func() *diagram.Node { return oci.Database.Autonomous() }
	afs["databaseservice"] = func() *diagram.Node { return oci.Database.DatabaseService() }
	afs["dataflowapachewhite"] = func() *diagram.Node { return oci.Database.DataflowApacheWhite() }
	afs["dis"] = func() *diagram.Node { return oci.Database.Dis() }
	afs["dmswhite"] = func() *diagram.Node { return oci.Database.DmsWhite() }
	afs["bigdataservice"] = func() *diagram.Node { return oci.Database.BigdataService() }
	afs["databaseservicewhite"] = func() *diagram.Node { return oci.Database.DatabaseServiceWhite() }
	afs["dataflowapache"] = func() *diagram.Node { return oci.Database.DataflowApache() }
	afs["dcat"] = func() *diagram.Node { return oci.Database.Dcat() }
	afs["resourcemgmt"] = func() *diagram.Node { return oci.Devops.ResourceMgmt() }
	afs["apigatewaywhite"] = func() *diagram.Node { return oci.Devops.ApiGatewayWhite() }
	afs["apiservicewhite"] = func() *diagram.Node { return oci.Devops.ApiServiceWhite() }
	afs["apiservice"] = func() *diagram.Node { return oci.Devops.ApiService() }
	afs["resourcemgmtwhite"] = func() *diagram.Node { return oci.Devops.ResourceMgmtWhite() }
	afs["groups"] = func() *diagram.Node { return oci.Governance.Groups() }
	afs["policieswhite"] = func() *diagram.Node { return oci.Governance.PoliciesWhite() }
	afs["tagging"] = func() *diagram.Node { return oci.Governance.Tagging() }
	afs["compartmentswhite"] = func() *diagram.Node { return oci.Governance.CompartmentsWhite() }
	afs["compartments"] = func() *diagram.Node { return oci.Governance.Compartments() }
	afs["ocid"] = func() *diagram.Node { return oci.Governance.Ocid() }
	afs["policies"] = func() *diagram.Node { return oci.Governance.Policies() }
	afs["taggingwhite"] = func() *diagram.Node { return oci.Governance.TaggingWhite() }
	afs["auditwhite"] = func() *diagram.Node { return oci.Governance.AuditWhite() }
	afs["logging"] = func() *diagram.Node { return oci.Governance.Logging() }
	afs["audit"] = func() *diagram.Node { return oci.Governance.Audit() }
	afs["groupswhite"] = func() *diagram.Node { return oci.Governance.GroupsWhite() }
	afs["loggingwhite"] = func() *diagram.Node { return oci.Governance.LoggingWhite() }
	afs["ocidwhite"] = func() *diagram.Node { return oci.Governance.OcidWhite() }
	afs["alarm"] = func() *diagram.Node { return oci.Monitoring.Alarm() }
	afs["emailwhite"] = func() *diagram.Node { return oci.Monitoring.EmailWhite() }
	afs["notificationswhite"] = func() *diagram.Node { return oci.Monitoring.NotificationsWhite() }
	afs["queuewhite"] = func() *diagram.Node { return oci.Monitoring.QueueWhite() }
	afs["workflowwhite"] = func() *diagram.Node { return oci.Monitoring.WorkflowWhite() }
	afs["healthcheckwhite"] = func() *diagram.Node { return oci.Monitoring.HealthCheckWhite() }
	afs["notifications"] = func() *diagram.Node { return oci.Monitoring.Notifications() }
	afs["telemetrywhite"] = func() *diagram.Node { return oci.Monitoring.TelemetryWhite() }
	afs["alarmwhite"] = func() *diagram.Node { return oci.Monitoring.AlarmWhite() }
	afs["email"] = func() *diagram.Node { return oci.Monitoring.Email() }
	afs["eventswhite"] = func() *diagram.Node { return oci.Monitoring.EventsWhite() }
	afs["searchwhite"] = func() *diagram.Node { return oci.Monitoring.SearchWhite() }
	afs["telemetry"] = func() *diagram.Node { return openstack.Monitoring.Telemetry() }
	afs["workflow"] = func() *diagram.Node { return oci.Monitoring.Workflow() }
	afs["events"] = func() *diagram.Node { return oci.Monitoring.Events() }
	afs["healthcheck"] = func() *diagram.Node { return oci.Monitoring.HealthCheck() }
	afs["queue"] = func() *diagram.Node { return oci.Monitoring.Queue() }
	afs["vcn"] = func() *diagram.Node { return oci.Network.Vcn() }
	afs["firewallwhite"] = func() *diagram.Node { return oci.Network.FirewallWhite() }
	afs["internetgatewaywhite"] = func() *diagram.Node { return oci.Network.InternetGatewayWhite() }
	afs["loadbalancer"] = func() *diagram.Node { return outscale.Network.LoadBalancer() }
	afs["securitylists"] = func() *diagram.Node { return oci.Network.SecurityLists() }
	afs["servicegatewaywhite"] = func() *diagram.Node { return oci.Network.ServiceGatewayWhite() }
	afs["vcnwhite"] = func() *diagram.Node { return oci.Network.VcnWhite() }
	afs["drgwhite"] = func() *diagram.Node { return oci.Network.DrgWhite() }
	afs["drg"] = func() *diagram.Node { return oci.Network.Drg() }
	afs["loadbalancerwhite"] = func() *diagram.Node { return oci.Network.LoadBalancerWhite() }
	afs["servicegateway"] = func() *diagram.Node { return oci.Network.ServiceGateway() }
	afs["routetablewhite"] = func() *diagram.Node { return oci.Network.RouteTableWhite() }
	afs["securitylistswhite"] = func() *diagram.Node { return oci.Network.SecurityListsWhite() }
	afs["encryption"] = func() *diagram.Node { return oci.Security.Encryption() }
	afs["maxsecurityzonewhite"] = func() *diagram.Node { return oci.Security.MaxSecurityZoneWhite() }
	afs["cloudguardwhite"] = func() *diagram.Node { return oci.Security.CloudGuardWhite() }
	afs["ddoswhite"] = func() *diagram.Node { return oci.Security.DdosWhite() }
	afs["encryptionwhite"] = func() *diagram.Node { return oci.Security.EncryptionWhite() }
	afs["cloudguard"] = func() *diagram.Node { return oci.Security.CloudGuard() }
	afs["ddos"] = func() *diagram.Node { return oci.Security.Ddos() }
	afs["maxsecurityzone"] = func() *diagram.Node { return oci.Security.MaxSecurityZone() }
	afs["vaultwhite"] = func() *diagram.Node { return oci.Security.VaultWhite() }
	afs["wafwhite"] = func() *diagram.Node { return oci.Security.WafWhite() }
	afs["idaccesswhite"] = func() *diagram.Node { return oci.Security.IdAccessWhite() }
	afs["idaccess"] = func() *diagram.Node { return oci.Security.IdAccess() }
	afs["keymanagementwhite"] = func() *diagram.Node { return oci.Security.KeyManagementWhite() }
	afs["keymanagement"] = func() *diagram.Node { return oci.Security.KeyManagement() }
	afs["blockstorageclonewhite"] = func() *diagram.Node { return oci.Storage.BlockStorageCloneWhite() }
	afs["blockstoragewhite"] = func() *diagram.Node { return oci.Storage.BlockStorageWhite() }
	afs["bucketswhite"] = func() *diagram.Node { return oci.Storage.BucketsWhite() }
	afs["objectstoragewhite"] = func() *diagram.Node { return oci.Storage.ObjectStorageWhite() }
	afs["objectstorage"] = func() *diagram.Node { return oci.Storage.ObjectStorage() }
	afs["storagegatewaywhite"] = func() *diagram.Node { return oci.Storage.StorageGatewayWhite() }
	afs["backuprestore"] = func() *diagram.Node { return oci.Storage.BackupRestore() }
	afs["datatransferwhite"] = func() *diagram.Node { return oci.Storage.DataTransferWhite() }
	afs["filestoragewhite"] = func() *diagram.Node { return oci.Storage.FileStorageWhite() }
	afs["filestorage"] = func() *diagram.Node { return oci.Storage.FileStorage() }
	afs["backuprestorewhite"] = func() *diagram.Node { return oci.Storage.BackupRestoreWhite() }
	afs["blockstorageclone"] = func() *diagram.Node { return oci.Storage.BlockStorageClone() }
	afs["datatransfer"] = func() *diagram.Node { return oci.Storage.DataTransfer() }
	afs["elasticperformancewhite"] = func() *diagram.Node { return oci.Storage.ElasticPerformanceWhite() }
	afs["elasticperformance"] = func() *diagram.Node { return oci.Storage.ElasticPerformance() }
	afs["blockstorage"] = func() *diagram.Node { return oci.Storage.BlockStorage() }
	afs["buckets"] = func() *diagram.Node { return oci.Storage.Buckets() }
	afs["ec2api"] = func() *diagram.Node { return openstack.Apiproxies.Ec2Api() }
	afs["murano"] = func() *diagram.Node { return openstack.Applicationlifecycle.Murano() }
	afs["solum"] = func() *diagram.Node { return openstack.Applicationlifecycle.Solum() }
	afs["freezer"] = func() *diagram.Node { return openstack.Applicationlifecycle.Freezer() }
	afs["masakari"] = func() *diagram.Node { return openstack.Applicationlifecycle.Masakari() }
	afs["cyborg"] = func() *diagram.Node { return openstack.Baremetal.Cyborg() }
	afs["ironic"] = func() *diagram.Node { return openstack.Baremetal.Ironic() }
	afs["cloudkitty"] = func() *diagram.Node { return openstack.Billing.Cloudkitty() }
	afs["qinling"] = func() *diagram.Node { return openstack.Compute.Qinling() }
	afs["zun"] = func() *diagram.Node { return openstack.Compute.Zun() }
	afs["nova"] = func() *diagram.Node { return openstack.Compute.Nova() }
	afs["kuryr"] = func() *diagram.Node { return openstack.Containerservices.Kuryr() }
	afs["kolla"] = func() *diagram.Node { return openstack.Deployment.Kolla() }
	afs["tripleo"] = func() *diagram.Node { return openstack.Deployment.Tripleo() }
	afs["charms"] = func() *diagram.Node { return openstack.Deployment.Charms() }
	afs["chef"] = func() *diagram.Node { return openstack.Deployment.Chef() }
	afs["horizon"] = func() *diagram.Node { return openstack.Frontend.Horizon() }
	afs["monasca"] = func() *diagram.Node { return openstack.Monitoring.Monasca() }
	afs["tricircle"] = func() *diagram.Node { return openstack.Multiregion.Tricircle() }
	afs["designate"] = func() *diagram.Node { return openstack.Networking.Designate() }
	afs["neutron"] = func() *diagram.Node { return openstack.Networking.Neutron() }
	afs["octavia"] = func() *diagram.Node { return openstack.Networking.Octavia() }
	afs["tacker"] = func() *diagram.Node { return openstack.Nfv.Tacker() }
	afs["congress"] = func() *diagram.Node { return openstack.Optimization.Congress() }
	afs["rally"] = func() *diagram.Node { return openstack.Optimization.Rally() }
	afs["vitrage"] = func() *diagram.Node { return openstack.Optimization.Vitrage() }
	afs["watcher"] = func() *diagram.Node { return openstack.Optimization.Watcher() }
	afs["zaqar"] = func() *diagram.Node { return openstack.Orchestration.Zaqar() }
	afs["blazar"] = func() *diagram.Node { return openstack.Orchestration.Blazar() }
	afs["heat"] = func() *diagram.Node { return openstack.Orchestration.Heat() }
	afs["mistral"] = func() *diagram.Node { return openstack.Orchestration.Mistral() }
	afs["senlin"] = func() *diagram.Node { return openstack.Orchestration.Senlin() }
	afs["puppet"] = func() *diagram.Node { return openstack.Packaging.Puppet() }
	afs["rpm"] = func() *diagram.Node { return openstack.Packaging.Rpm() }
	afs["loci"] = func() *diagram.Node { return openstack.Packaging.Loci() }
	afs["barbican"] = func() *diagram.Node { return openstack.Sharedservices.Barbican() }
	afs["glance"] = func() *diagram.Node { return openstack.Sharedservices.Glance() }
	afs["karbor"] = func() *diagram.Node { return openstack.Sharedservices.Karbor() }
	afs["keystone"] = func() *diagram.Node { return openstack.Sharedservices.Keystone() }
	afs["searchlight"] = func() *diagram.Node { return openstack.Sharedservices.Searchlight() }
	afs["cinder"] = func() *diagram.Node { return openstack.Storage.Cinder() }
	afs["manila"] = func() *diagram.Node { return openstack.Storage.Manila() }
	afs["swift"] = func() *diagram.Node { return programming.Language.Swift() }
	afs["openstackclient"] = func() *diagram.Node { return openstack.User.Openstackclient() }
	afs["magnum"] = func() *diagram.Node { return openstack.Workloadprovisioning.Magnum() }
	afs["sahara"] = func() *diagram.Node { return openstack.Workloadprovisioning.Sahara() }
	afs["trove"] = func() *diagram.Node { return openstack.Workloadprovisioning.Trove() }
	afs["internetservice"] = func() *diagram.Node { return outscale.Network.InternetService() }
	afs["natservice"] = func() *diagram.Node { return outscale.Network.NatService() }
	afs["net"] = func() *diagram.Node { return outscale.Network.Net() }
	afs["sitetositevpng"] = func() *diagram.Node { return outscale.Network.SiteToSiteVpng() }
	afs["identityandaccessmanagement"] = func() *diagram.Node { return outscale.Security.IdentityAndAccessManagement() }
	afs["simplestorageservice"] = func() *diagram.Node { return outscale.Storage.SimpleStorageService() }
	afs["django"] = func() *diagram.Node { return programming.Framework.Django() }
	afs["flutter"] = func() *diagram.Node { return programming.Framework.Flutter() }
	afs["laravel"] = func() *diagram.Node { return programming.Framework.Laravel() }
	afs["spring"] = func() *diagram.Node { return programming.Framework.Spring() }
	afs["vue"] = func() *diagram.Node { return programming.Framework.Vue() }
	afs["angular"] = func() *diagram.Node { return programming.Framework.Angular() }
	afs["flask"] = func() *diagram.Node { return programming.Framework.Flask() }
	afs["rails"] = func() *diagram.Node { return programming.Framework.Rails() }
	afs["react"] = func() *diagram.Node { return programming.Framework.React() }
	afs["ember"] = func() *diagram.Node { return programming.Framework.Ember() }
	afs["csharp"] = func() *diagram.Node { return programming.Language.Csharp() }
	afs["javascript"] = func() *diagram.Node { return programming.Language.Javascript() }
	afs["kotlin"] = func() *diagram.Node { return programming.Language.Kotlin() }
	afs["matlab"] = func() *diagram.Node { return programming.Language.Matlab() }
	afs["php"] = func() *diagram.Node { return programming.Language.Php() }
	afs["typescript"] = func() *diagram.Node { return programming.Language.Typescript() }
	afs["rust"] = func() *diagram.Node { return programming.Language.Rust() }
	afs["bash"] = func() *diagram.Node { return programming.Language.Bash() }
	afs["clang"] = func() *diagram.Node { return programming.Language.C() }
	afs["cpp"] = func() *diagram.Node { return programming.Language.Cpp() }
	afs["dart"] = func() *diagram.Node { return programming.Language.Dart() }
	afs["nodejs"] = func() *diagram.Node { return programming.Language.Nodejs() }
	afs["python"] = func() *diagram.Node { return programming.Language.Python() }
	afs["rlang"] = func() *diagram.Node { return programming.Language.R() }
	afs["java"] = func() *diagram.Node { return programming.Language.Java() }
	afs["go"] = func() *diagram.Node { return programming.Language.Go() }
	afs["ruby"] = func() *diagram.Node { return programming.Language.Ruby() }
	afs["opsgenie"] = func() *diagram.Node { return saas.Alerting.Opsgenie() }
	afs["pushover"] = func() *diagram.Node { return saas.Alerting.Pushover() }
	afs["snowflake"] = func() *diagram.Node { return saas.Analytics.Snowflake() }
	afs["stitch"] = func() *diagram.Node { return saas.Analytics.Stitch() }
	afs["cloudflare"] = func() *diagram.Node { return saas.Cdn.Cloudflare() }
	afs["slack"] = func() *diagram.Node { return saas.Chat.Slack() }
	afs["telegram"] = func() *diagram.Node { return saas.Chat.Telegram() }
	afs["auth0"] = func() *diagram.Node { return saas.Identity.Auth0() }
	afs["okta"] = func() *diagram.Node { return saas.Identity.Okta() }
	afs["papertrail"] = func() *diagram.Node { return saas.Logging.Papertrail() }
	afs["cloudinary"] = func() *diagram.Node { return saas.Media.Cloudinary() }
	afs["recombee"] = func() *diagram.Node { return saas.Recommendation.Recombee() }
	afs["facebook"] = func() *diagram.Node { return saas.Social.Facebook() }
	afs["twitter"] = func() *diagram.Node { return saas.Social.Twitter() }
	return afs
}
